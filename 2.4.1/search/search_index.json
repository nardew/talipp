{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>talipp (a.k.a. tali++) is a Python library implementing financial indicators for technical analysis. The distinctive feature of the library is its incremental computation which fits well real-time applications or applications with iterative input in general.  </p> <p>Supported incremental operations are:</p> <ul> <li>adding a new input value</li> <li>updating the last input value</li> <li>removing input values</li> </ul> example<pre><code>from talipp.indicators import SMA\n\n# initialize standard moving average with period of 3\nsma = SMA(period = 3, input_values = [1, 2, 3, 4])\n\n# print indicator\nprint(f'SMA(3): {sma}') # [None, None, 2.0, 3.0]\n\n# append a new input value incrementally\nsma.add(5)\nprint(f'SMA(3): {sma}') # [None, None, 2.0, 3.0, 4.0]\n\n# update the last value\nsma.update(8)\nprint(f'SMA(3): {sma}') # [None, None, 2.0, 3.0, 5.0]\n\n# update the last value again\nsma.update(11)\nprint(f'SMA(3): {sma}') # [None, None, 2.0, 3.0, 6.0]\n\n# remove the last value\nsma.remove()\nprint(f'SMA(3): {sma}') # [None, None, 2.0, 3.0]\n</code></pre> <p>Incremental nature of the library means that any update of the input data is reflected in the indicators' values in O(1) in contrary to O(n) of standard libraries which need to recalculate all indicator values from scratch. </p> <p>To give you better perspective about the performance gain look at the below figure. It compares running time of incremental (talipp) and non-incremental (talib) libraries when calculating SMA(20) for inputs of various sizes where input values are fed one by one. </p> <p></p>"},{"location":"getting-started/","title":"Getting started","text":""},{"location":"getting-started/#installation","title":"Installation","text":"<p>talipp can be installed from the following sources:</p>"},{"location":"getting-started/#pypi","title":"PyPI","text":"<pre><code>pip install talipp\n</code></pre>"},{"location":"getting-started/#github","title":"GitHub","text":"<pre><code>pip install git+https://github.com/nardew/talipp.git@main\n</code></pre>"},{"location":"getting-started/#conda","title":"Conda","text":"<pre><code>conda install conda-forge::talipp\n</code></pre>"},{"location":"getting-started/#essentials","title":"Essentials","text":""},{"location":"getting-started/#import-indicators","title":"Import indicators","text":"<p>Indicators can be imported as</p> <pre><code>from talipp.indicators import &lt;indicator_name&gt;\n</code></pre> <p>For instance, to import EMA indicator, use</p> <pre><code>from talipp.indicators import EMA\n</code></pre> <p>List of all indicators can be found in the Indicator catalogue.</p>"},{"location":"getting-started/#basic-usage","title":"Basic usage","text":"<p>Indicators can be fed input values either during their initialization</p> <pre><code>from talipp.indicators import EMA\n\nema = EMA(period=3, input_values=[1, 2, 3, 4, 5])\n</code></pre> <p>or incrementally</p> <pre><code>from talipp.indicators import EMA\n\nema = EMA(period=3)\nema.add(1)\nema.add(2)\n...\n</code></pre> <p>To print indicator's values you can treat each indicator as a list, i.e. you can do</p> <pre><code>from talipp.indicators import EMA\n\nema = EMA(period=3, input_values=[1, 2, 3, 4, 5])\n\nprint(ema[-1])\nprint(ema[-5:])\nprint(ema)\n</code></pre> <p>Detailed description of indicator manipulation can be found in the section Indicator operations.</p>"},{"location":"getting-started/#input-types","title":"Input types","text":"<p>Indicators can accept two types of input - simple type such as <code>float</code> or complex OHLCV type encapsulating structured data such as open price, high price, low price, close price, ... </p> <p>Each indicator specifies what type of input is required. For instance, SMA indicator accepts <code>float</code> while Stoch indicator accepts <code>OHLCV</code>.</p> <pre><code>from talipp.indicators import SMA, Stoch\nfrom talipp.ohlcv import OHLCV\n\nsma = SMA(period=3, input_values=[1, 2, 3])\nstoch = Stoch(period=3, smoothing_period=2, input_values=[OHLCV(1, 2, 3, 4), OHLCV(5, 6, 7, 8)])\n</code></pre> <p>Read more about input types in the Input types section.</p>"},{"location":"getting-started/#examples","title":"Examples","text":"<p>The library comes with examples\u00a0\u29c9 showcasing usage of each indicator on artificial input.</p> <p>If you have a binance account, then you can check examples\u00a0\u29c9 of indicators on realtime data. </p>"},{"location":"indicator-catalogue/","title":"Indicator catalogue","text":"Name Full name Description ADL Accumulation Distribution Line \u00a0\u29c9 ADX Average Directional Index \u00a0\u29c9 ALMA Arnaud Legoux Moving Average AO Awesome Oscillator \u00a0\u29c9 Aroon Aroon Indicator \u00a0\u29c9 ATR Average True Range \u00a0\u29c9 BB Bollinger Bands \u00a0\u29c9 BOP Balance of Power \u00a0\u29c9 CCI Commodity Channel Index \u00a0\u29c9 ChaikinOsc Chaikin Oscillator \u00a0\u29c9 ChandeKrollStop Chande Kroll Stop \u00a0\u29c9 CHOP Choppiness Index \u00a0\u29c9 CoppockCurve Coppock Curve \u00a0\u29c9 DEMA Double Exponential Moving Average \u00a0\u29c9 DonchianChannels Donchian Channels \u00a0\u29c9 DPO Detrended Price Oscillator \u00a0\u29c9 EMA Exponential Moving Average \u00a0\u29c9 EMV Ease of Movement \u00a0\u29c9 ForceIndex Force Index \u00a0\u29c9 HMA Hull Moving Average \u00a0\u29c9 IBS Internal Bar Strength \u00a0\u29c9 IchimokuCloud Ichimoku Cloud \u00a0\u29c9 KAMA Kauffman's Adaptive Moving Average \u00a0\u29c9 KeltnerChannels Keltner Channels \u00a0\u29c9 KST Know Sure Thing \u00a0\u29c9 KVO Klinger Volume Oscilator \u00a0\u29c9 MACD Moving Average Convergence Divergence \u00a0\u29c9 MassIndex Mass Index \u00a0\u29c9 McGinleyDynamic McGinley Dynamic \u00a0\u29c9 MeanDev Mean Deviation \u00a0\u29c9 OBV On-balacen Volume \u00a0\u29c9 ParabolicSAR Parabolic Stop and Reverse \u00a0\u29c9 PivotsHL<sup>1</sup><sup>2</sup> Pivot High Low Points ROC Rate of Change \u00a0\u29c9 RogersSatchell Rogers-Satchell volatility indicator \u00a0\u29c9 RSI Relative Strength Index \u00a0\u29c9 SFX SMA Simple Moving Average \u00a0\u29c9 SMMA Smoothed Simple Moving Average SOBV Smoothed On-Balance Volume STC Schaff Trend Cycle \u00a0\u29c9 StdDev Standard Deviation Stoch Stochastic Oscillator \u00a0\u29c9 StochRSI Stochastic Relative Strength Index \u00a0\u29c9 SuperTrend Super Trend \u00a0\u29c9 T3 T3 Moving Average \u00a0\u29c9 TEMA Triple Exponential Moving Average \u00a0\u29c9 TRIX TRIX \u00a0\u29c9 TSI True Strength Index \u00a0\u29c9 TTM TTM Squeeze \u00a0\u29c9 UO Ultimate Oscillator \u00a0\u29c9 VTX Vortex Indicator \u00a0\u29c9 VWAP Volume-weighted Average Price \u00a0\u29c9 VWMA Volume-weighted Moving Average \u00a0\u29c9 WMA Weighted Moving Average \u00a0\u29c9 ZigZag<sup>1</sup> ZigZag \u00a0\u29c9 ZLEMA Zero-lag Exponential Moving Average \u00a0\u29c9 <p>Request a new indicator via GitHub Issues\u00a0\u29c9.</p> <ol> <li> <p>Due to the indicator's nature incremental operations are not supported.\u00a0\u21a9\u21a9</p> </li> <li> <p>The indicator is deprecated and will be removed in a next major version.\u00a0\u21a9</p> </li> </ol>"},{"location":"indicator-chaining/","title":"Indicator chaining","text":"<p>talipp offers a unique feature of chaining multiple indicators into a pipeline. When indicators are chained, each output of one indicator immediately becomes a new input of the one after forming a train of propagating values. As always, all this in constant time!</p> <p>The major benefit of chaining indicators is it allows user to define their custom indicators. To chain indicators, one links them together via <code>input_indicator</code> parameter during initialization as illustrated below. Notice how the second indicator produces new outputs even without any explicit calls of <code>add</code> method:</p> <pre><code>from talipp.indicators import SMA\n\nsma1 = SMA(2)\nsma2 = SMA(2, input_indicator = sma1)\n\nsma1.add(1)\nprint(f\"SMA1: {sma1}\") # [None]\nprint(f\"SMA2: {sma2}\") # [None]\n\nsma1.add(2)\nprint(f\"SMA1: {sma1}\") # [None, 1.5]\nprint(f\"SMA2: {sma2}\") # [None, None]\n\nsma1.add(3)\nprint(f\"SMA1: {sma1}\") # [None, 1.5,  2.5]\nprint(f\"SMA2: {sma2}\") # [None, None, 2]\n</code></pre> <p>One typical use-case of indicator chaining is to produce a smoothed version of an existing indicator:</p> <pre><code>from talipp.indicators import SMA, RSI\n\nrsi = RSI(14)\nsmoothed_rsi = SMA(9, input_indicator = rsi)\n\nrsi.add([...])\nprint(smoothed_rsi)\n</code></pre> <p>There is no limit to the number of chained indicators, one can create a computation pipeline from as many indicators as needed.</p>"},{"location":"indicator-chaining/#input-modifiers","title":"Input modifiers","text":"<p>Chaining of indicators assumes that output and input types of chained indicators match. In case they do not, talipp provides an option to specify a conversion function which will be applied to the output value before it is fed to the next indicator. The function is specified in indicator's <code>__init__</code> method via <code>input_modifier</code> attribute.</p> <p>To illustrate usage of input modifiers, imagine we want to create a new indicator based on Bollinger Bands which will calculate EMA of the upper band. With standard libraries you would first calculate <code>Bolliger Bands</code>, then extract the upper band and finally feed it to <code>EMA</code>. With indicator chaining we can do better (besides it gives much more efficient solution). The only issue is that while <code>EMA</code> expects <code>floats</code> as the input, <code>Bollinger Bands</code> produce BBVal. Input modifiers for the rescue.</p> <pre><code>from talipp.indicators import BB, EMA\n\nbb = BB(5, 2)\nema_bb = EMA(3, input_indicator=bb, input_modifier=lambda x: x.ub)\n</code></pre>"},{"location":"indicator-operations/","title":"Indicator operations","text":"<p>Each indicator provides operations to read, add, update and remove its values.</p>"},{"location":"indicator-operations/#reading-values","title":"Reading values","text":"<p>Indicators implement Sequence interface, meaning they can be treated as any other list when reading data.</p> <p>Following operations demonstrate how to read indicator's values:</p> <pre><code>from talipp.indicators import SMA\n\nsma = SMA(period=3, input_values=[1,2,3])\n\n# print all values\n# outputs [None, None, 2]\nprint(sma)\n\n# print last value\n# outputs 2\nprint(sma[-1])\n\n# print number of values\n# outputs 3\nprint(len(sma))\n</code></pre>"},{"location":"indicator-operations/#adding-values","title":"Adding values","text":"<p>To incrementally add a new value use add method:</p> <pre><code>from talipp.indicators import SMA\n\nsma = SMA(period=3, input_values=[1,2,3])\n\n# add a single value\nsma.add(4)\n\n# add a list of values\nsma.add([4, 5, 6])\n</code></pre>"},{"location":"indicator-operations/#updating-values","title":"Updating values","text":"<p>To update the most recent value use update method:</p> <pre><code>from talipp.indicators import SMA\n\nsma = SMA(period=3, input_values=[1,2,3])\n\n# update the last input value\nsma.update(4)\n</code></pre> <p>Note</p> <p>Update of a value does not change number of indicator's values. Instead, it first removes the last input value and then it appends a new one.</p>"},{"location":"indicator-operations/#removing-values","title":"Removing values","text":"<p>Indicators provide several ways how to remove data:</p> <ol> <li> <p>To remove the most recent input value, use remove method:     <pre><code>from talipp.indicators import SMA\n\nsma = SMA(period=3, input_values=[1,2,3])\n\n# outputs [None, None, 2]\nprint(sma)\n\n# remove the last input value\nsma.remove()\n\n# outputs [None, None]\nprint(sma)\n</code></pre></p> </li> <li> <p>To remove all input values, use remove_all method:    <pre><code>from talipp.indicators import SMA\n\nsma = SMA(period=3, input_values=[1,2,3])\n\n# remove all input values\nsma.remove_all()\n\n# outputs []\nprint(sma)\n</code></pre></p> </li> <li> <p>To remove the oldest values, use purge_oldest method:    <pre><code>from talipp.indicators import SMA\n\nsma = SMA(period=3, input_values=[1,2,3])\n\n# outputs [None, None, 2]\nprint(sma)\n\n# purge the first value\nsma.purge_oldest(1)\n\n# outputs [None, 2]\nprint(sma)\n</code></pre></p> </li> </ol> <p>Note</p> <p>Purging old values is useful when memory consumption is a concern. If old indicator's values are not needed anymore, feel free to purge them. However, be careful not to purge any data if calculation of the current values still depends on them.</p>"},{"location":"input-types/","title":"Input types","text":"<p>Indicators work with two types of input data - simple <code>float</code> or complex OHLCV objects. While <code>float</code> is used in indicators requiring just a plain series of numbers, <code>OHLCV</code> object provides additional data (open, high, low, close price and optional volume and time) needed by certain class of indicators.</p> <p>Each indicator defines what kind of input it requires. Users can derive it either from the type of <code>input_values</code> parameter present in the indicator's <code>__init__</code> method or from the indicator's documentation.</p> <p>Below is an example of one indicator consuming <code>floats</code> and another one consuming <code>OHLCV</code> objects.</p> <pre><code>from talipp.indicators import SMA, Stoch\nfrom talipp.ohlcv import OHLCV\n\nsma = SMA(period=3, input_values=[1, 2, 3])\nstoch = Stoch(period=3, smoothing_period=2, input_values=[OHLCV(1, 2, 3, 4), OHLCV(5, 6, 7, 8)])\n</code></pre>"},{"location":"input-types/#ohlcv-factory","title":"OHLCV factory","text":"<p>To simplify conversion from user's format of input data to <code>OHLCV</code> objects, talipp provides OHLCVFactory helper class. The factory offers three static helpers:</p>"},{"location":"input-types/#from_dict","title":"from_dict","text":"<p>This method accepts a dictionary with <code>open</code>, <code>high</code>, <code>low</code>, <code>close</code> and optionally <code>volume</code> and <code>time</code> keys where each key contains a list of values and generates a list of <code>OHLCV</code> objects out of them.</p> <p>Example:</p> <pre><code>from talipp.ohlcv import OHLCVFactory\n\nuser_input = {\n    'open':  [1,  2,  3],\n    'high':  [4,  5,  6],\n    'low':   [7,  8,  9],\n    'close': [10, 11, 12]\n}\n\nprint(OHLCVFactory.from_dict(user_input))\n</code></pre> <p>Output:</p> <pre><code>[OHLCV(1, 4, 7, 10), OHLCV(2, 5, 8, 11), OHLCV(3, 6, 9, 12)]\n</code></pre>"},{"location":"input-types/#from_matrix","title":"from_matrix","text":"<p>This method accepts a list of tuples where each tuple represents values to be used in <code>OHLCV</code> object.</p> <p>Example:</p> <pre><code>from talipp.ohlcv import OHLCVFactory\n\nuser_input = [\n    (1,  2,  3,  4),\n    (5,  6,  7,  8),\n    (9, 10, 11, 12)\n]\n\nprint(OHLCVFactory.from_matrix(user_input))\n</code></pre> <p>Output:</p> <pre><code>[OHLCV(1, 2, 3, 4), OHLCV(5, 6, 7, 8), OHLCV(9, 10, 11, 12)]\n</code></pre>"},{"location":"input-types/#from_matrix2","title":"from_matrix2","text":"<p>Similar to from_matrix, this method accepts a list of lists where the first list represents all <code>open</code> values, the second represents all <code>highs</code>, etc.</p> <pre><code>from talipp.ohlcv import OHLCVFactory\n\nuser_input = [\n    [ 1,  2,  3],\n    [ 4,  5,  6],\n    [ 7,  8,  9],\n    [10, 11, 12]\n]\n\nprint(OHLCVFactory.from_matrix2(user_input))\n</code></pre> <p>Output:</p> <pre><code>[OHLCV(1, 4, 7, 10), OHLCV(2, 5, 8, 11), OHLCV(3, 6, 9, 12)]\n</code></pre>"},{"location":"output-types/","title":"Output types","text":"<p>Like indicators that process either simple or complex input values, the output values of indicators can also range from simple floats to complex objects.</p> <p>Complex output types are required if indicator needs to return multiple values per a single data point. For instance, while SMA will always return a single output value for each input value, Bollinger Bands has to return three values per each input value (lower, central and upper band), hence requiring a complex return type.</p> <p>Complex output type is always defined as a <code>dataclass</code> and is documented in each indicator module.</p> <p>For instance, output type of Bollinger Bands is BBVal and looks as follows:</p> <pre><code>@dataclass\nclass BBVal:\n    lb: float = None\n    cb: float = None\n    ub: float = None\n</code></pre> <p>That's why when printing Bollinger Bands, the output will be</p> <pre><code>[BBVal(...), BBVal(...), BBVal(...), ...]\n</code></pre> <p>Other examples of complex output types are:</p> <ul> <li>MACD -&gt; MACDVal</li> <li>Parabolic SAR -&gt; ParabolicSARVal</li> <li>Stoch -&gt; StochVal</li> <li>...</li> </ul> <p>When complex outputs serve as an input for other components in a data pipeline sometimes it may be more convenient to decompose them into lists per each attribute of the complex type. In other words, instead of working with</p> <pre><code>[StochVal(k=10, d=None), StochVal(k=20.0, d=15), StochVal(k=12, d=14)]\n</code></pre> <p>it may be more useful to have</p> <pre><code>{\n    'k': [  10, 20, 12], \n    'd': [None, 15, 14]\n}\n</code></pre> <p>To transform the former output into the latter, talipp provides composite_to_lists utility function which can be applied to every indicator returning complex types.</p>"},{"location":"serialization/","title":"Serialization","text":"<p>This quick guide shows how to serialize full indicator's state including the input and output values and how to restore it later on. This can come handy e.g. if indicator calculated non-trivial number of items and we do not want to calculate them again next time.</p> <p>The solution is based on jsonpickle\u00a0\u29c9 library which can encode/decode objects into string form.</p> <pre><code>import jsonpickle\nfrom talipp.indicators import BB\n\nbb = BB(5, 1, list(range(0, 100, 2)))\nbb_serialized = jsonpickle.encode(bb, unpicklable = True)\n\n# write bb_serialized e.g. to a file...\n\nbb_deserialized = jsonpickle.decode(bb_serialized)\n\n# use the deserialized indicator as usual\nbb_deserialized.add(5)\n</code></pre>"},{"location":"timeframe-sampling/","title":"Timeframe auto-sampling","text":"<p>Timeframe auto-sampling is a special feature intended for indicators working with OHLCV input. By default, indicators add a new output value for each input one. With timeframe auto-sampling it is possible to \"merge\" several values received within selected timeframe and keep only the last one in given timeframe. This feature suits well e.g. real-time applications which receive new inputs tens or hundreds times a second but the indicators need to be built on sampled timeframe (secondly, minutely, ...).</p> <p>Supported timeframes are available in SamplingPeriodType enum and include values such as</p> <ul> <li>1 second</li> <li>3 seconds</li> <li>5 seconds</li> <li>30 seconds</li> <li>1 minute</li> <li>...</li> </ul> <p>To enable auto-sampling, setup <code>input_sampling</code> attribute when initializing an indicator:</p> <pre><code>from datetime import datetime\nfrom talipp.indicators import OBV\nfrom talipp.input import SamplingPeriodType\nfrom talipp.ohlcv import OHLCV\n\n# choose auto-sampling by 15 seconds\nobv = OBV(input_sampling=SamplingPeriodType.SEC_15)\n\ndt = datetime(2024, 1, 1, 0, 0, 0)\nohlcv = OHLCV(1, 1, 1, 1, 1, dt)\n\n# time 00:00:00\nobv.add(ohlcv)\nprint(len(obv)) # 1\n\n# time 00:00:13\nohlcv.time = dt.replace(second=13)\nobv.add(ohlcv) # still within the same timeframe =&gt; no new value added, the last one updated\nprint(len(obv)) # 1\n\n# time 00:00:17\nohlcv.time = dt.replace(second=17)\nobv.add(ohlcv) # next period entered =&gt; new value added\nprint(len(obv)) # 2\n\n# time 00:00:25\nohlcv.time = dt.replace(second=25)\nobv.add(ohlcv) # still within the same timeframe =&gt; no new value added, the last one updated\nprint(len(obv)) # 2\n</code></pre> <p>Tip</p> <p>If you want to apply auto-sampling to an indicator which accepts <code>float</code> input, e.g. MACD indicator, then wrap each input value in a \"dummy\" OHLCV object, populate its <code>close</code> and <code>time</code> components and finally provide input modifier to extract the value</p> <p>Example</p> <pre><code>from datetime import datetime\nfrom talipp.indicators import MACD\nfrom talipp.input import SamplingPeriodType\nfrom talipp.ohlcv import OHLCV\n\ninput_floats = [1.0, 2.0, ...]\ndt = datetime(2024, 1, 1, 0, 0, 0)\ninput_ohlcv = [OHLCV(None, None, None, value, None, dt) for value in input_floats]\nmacd = MACD(input_values=input_ohlcv, input_modifier=lambda x: x.close, input_sampling=SamplingPeriodType.SEC_15)\n</code></pre>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li> talipp<ul> <li> exceptions</li> <li> indicator_util</li> <li> indicators<ul> <li> ADX</li> <li> ALMA</li> <li> AO</li> <li> ATR</li> <li> AccuDist</li> <li> Aroon</li> <li> BB</li> <li> BOP</li> <li> CCI</li> <li> CHOP</li> <li> ChaikinOsc</li> <li> ChandeKrollStop</li> <li> CoppockCurve</li> <li> DEMA</li> <li> DPO</li> <li> DonchianChannels</li> <li> EMA</li> <li> EMV</li> <li> FibonacciRetracement</li> <li> ForceIndex</li> <li> HMA</li> <li> IBS</li> <li> Ichimoku</li> <li> Indicator</li> <li> KAMA</li> <li> KST</li> <li> KVO</li> <li> KeltnerChannels</li> <li> MACD</li> <li> MassIndex</li> <li> McGinleyDynamic</li> <li> MeanDev</li> <li> OBV</li> <li> ParabolicSAR</li> <li> PivotsHL</li> <li> ROC</li> <li> RSI</li> <li> RogersSatchell</li> <li> SFX</li> <li> SMA</li> <li> SMMA</li> <li> SOBV</li> <li> STC</li> <li> StdDev</li> <li> Stoch</li> <li> StochRSI</li> <li> SuperTrend</li> <li> T3</li> <li> TEMA</li> <li> TRIX</li> <li> TSI</li> <li> TTM</li> <li> UO</li> <li> VTX</li> <li> VWAP</li> <li> VWMA</li> <li> WMA</li> <li> ZLEMA</li> <li> ZigZag</li> </ul> </li> <li> input</li> <li> ma</li> <li> ohlcv</li> </ul> </li> </ul>"},{"location":"reference/talipp/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> talipp","text":""},{"location":"reference/talipp/#talipp","title":"talipp","text":""},{"location":"reference/talipp/exceptions/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> exceptions","text":""},{"location":"reference/talipp/exceptions/#talipp.exceptions","title":"exceptions","text":"<p>Exception definitions.</p>"},{"location":"reference/talipp/exceptions/#talipp.exceptions.TalippException","title":"TalippException","text":"<p>               Bases: <code>Exception</code></p> <p>Base talipp exception class.</p>"},{"location":"reference/talipp/indicator_util/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> indicator_util","text":""},{"location":"reference/talipp/indicator_util/#talipp.indicator_util","title":"indicator_util","text":"<p>Indicator utilities.</p>"},{"location":"reference/talipp/indicator_util/#talipp.indicator_util.composite_to_lists","title":"composite_to_lists","text":"<pre><code>composite_to_lists(\n    indicator: Indicator,\n) -&gt; Dict[str, List[float]]\n</code></pre> <p>Transform the list of composite indicator output values into lists of values per each member attribute.</p> <p>Applicable only to indicators retuning composite output values.</p> <p>Examples:</p> <p>Take Bollinger Bands indicator and its BBVal output value type. If the indicator is printed, it will return</p> <pre><code>[BBVal(lb=x1, cb=y1, ub=z1), BBVal(lb=x2, cb=y2, ub=z2), ...]\n</code></pre> <p>If the indicator is passed into <code>composite_to_lists</code> method, the output will be transformed into</p> <pre><code>{'lb': [x1, x2, ...], 'cb': [y1, y2, ...], 'ub': [z1, z2, ...]}\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>indicator</code> <code>Indicator</code> <p>Indicator to be transformed.</p> required <p>Returns:</p> Type Description <code>Dict[str, List[float]]</code> <p>A dictionary with keys being all members of the composite output type and values being all indicator's output values of given key.</p> <p>Raises:</p> Type Description <code>TalippException</code> <p>Indicator returning non-composite output values was passed in.</p> Source code in <code>talipp/indicator_util.py</code> <pre><code>def composite_to_lists(indicator: Indicator) -&gt; Dict[str, List[float]]:\n    \"\"\"Transform the list of composite indicator output values into lists of values per each member attribute.\n\n    Applicable only to indicators retuning composite output values.\n\n    Examples:\n        Take [Bollinger Bands][talipp.indicators.BB] indicator and its [BBVal][talipp.indicators.BB.BBVal] output value type. If the indicator is printed, it will return\n\n            [BBVal(lb=x1, cb=y1, ub=z1), BBVal(lb=x2, cb=y2, ub=z2), ...]\n\n        If the indicator is passed into `composite_to_lists` method, the output will be transformed into\n\n            {'lb': [x1, x2, ...], 'cb': [y1, y2, ...], 'ub': [z1, z2, ...]}\n\n    Args:\n        indicator: Indicator to be transformed.\n\n    Returns:\n        A dictionary with keys being all members of the composite output type and values being all indicator's output values of given key.\n\n    Raises:\n        TalippException: Indicator returning non-composite output values was passed in.\n    \"\"\"\n    if not has_valid_values(indicator, 1):\n        return {}\n    else:\n        if is_dataclass(indicator.get_output_value_type()):\n            result = {key: [] for key in map(lambda x: x.name, fields(indicator.get_output_value_type()))}\n            for output_value in indicator:\n                for key in fields(indicator.get_output_value_type()):\n                    if output_value is not None:\n                        result[key.name].append(output_value.__dict__[key.name])\n                    else:\n                        result[key.name].append(None)\n            return result\n        else:\n            raise TalippException(f\"composite_to_lists(...) method can be used only with indicators returning composite output values, \"\n                                  f\"this indicator returns {indicator.get_output_value_type()}.\")\n</code></pre>"},{"location":"reference/talipp/indicator_util/#talipp.indicator_util.has_valid_values","title":"has_valid_values","text":"<pre><code>has_valid_values(\n    sequence: Union[Indicator, List[Any]],\n    window: int = 1,\n    exact: bool = False,\n) -&gt; bool\n</code></pre> <p>Evaluate whether sequence has well-defined values.</p> <p>By well-defined values it is meant that the sequence has sufficient length (defined by <code>window</code> argument) and its values do not contain <code>None</code>. Not all values within the <code>window</code> are checked, only the one at the beginning of the window. If it is non-<code>None</code>, then it is assumed all values are non-<code>None</code>.</p> <p>If exact check is required (<code>exact</code> argument), then any other value before the window must be <code>None</code>.</p> <p>Examples:</p> <pre><code> sequence=[1, 2], window=2, exact=True/False =&gt; return True\n sequence=[1, 2], window=1, exact=False =&gt; return True\n sequence=[1, 2], window=1, exact=True =&gt; return False\n sequence=[None, 2], window=1, exact=True =&gt; return True\n sequence=[None, 2], window=2, exact=True/False =&gt; return False\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>sequence</code> <code>Union[Indicator, List[Any]]</code> <p>The input sequence.</p> required <code>window</code> <code>int</code> <p>The window of values to be evaluated.</p> <code>1</code> <code>exact</code> <code>bool</code> <p>True if the evaluation requires the specified window contains well-defined values but any other greater window does not.</p> <code>False</code> <p>Returns:</p> Type Description <code>bool</code> <p>True if sequence contains well-defined values, otherwise False.</p> Source code in <code>talipp/indicator_util.py</code> <pre><code>def has_valid_values(sequence: Union[Indicator, List[Any]], window: int = 1, exact: bool = False) -&gt; bool:\n    \"\"\"Evaluate whether sequence has well-defined values.\n\n    By well-defined values it is meant that the sequence has sufficient length (defined by `window` argument) and its values do not contain `None`. Not all values within the `window` are checked, only the one at the beginning of the window. If it is non-`None`, then it is assumed all values are non-`None`.\n\n    If exact check is required (`exact` argument), then any other value before the window must be `None`.\n\n    Examples:\n\n         sequence=[1, 2], window=2, exact=True/False =&gt; return True\n         sequence=[1, 2], window=1, exact=False =&gt; return True\n         sequence=[1, 2], window=1, exact=True =&gt; return False\n         sequence=[None, 2], window=1, exact=True =&gt; return True\n         sequence=[None, 2], window=2, exact=True/False =&gt; return False\n\n    Args:\n        sequence: The input sequence.\n        window: The window of values to be evaluated.\n        exact: True if the evaluation requires the specified window contains well-defined values but any other greater window does not.\n\n    Returns:\n        True if sequence contains well-defined values, otherwise False.\n    \"\"\"\n    if not exact:\n        return len(sequence) &gt;= window and sequence[-window] is not None\n    else:\n        return (len(sequence) == window and sequence[-window] is not None) or \\\n            (len(sequence) &gt; window and sequence[-window] is not None and sequence[-window-1] is None)\n</code></pre>"},{"location":"reference/talipp/indicator_util/#talipp.indicator_util.previous_if_exists","title":"previous_if_exists","text":"<pre><code>previous_if_exists(\n    sequence: Union[Indicator, List[Any]],\n    index: int = -1,\n    default: Any = 0,\n) -&gt; Any\n</code></pre> <p>Return value from <code>index</code>th position in the <code>sequence</code> if exists, otherwise return <code>default</code> value.</p> <p>Parameters:</p> Name Type Description Default <code>sequence</code> <code>Union[Indicator, List[Any]]</code> <p>The input sequence.</p> required <code>index</code> <code>int</code> <p>Index to be returned.</p> <code>-1</code> <code>default</code> <code>Any</code> <p>Default value to be returned if <code>index</code> is out of range.</p> <code>0</code> <p>Returns:</p> Type Description <code>Any</code> <p>The value from the sequence at <code>index</code> position if exists, <code>default</code> otherwise.</p> Source code in <code>talipp/indicator_util.py</code> <pre><code>def previous_if_exists(sequence: Union[Indicator, List[Any]], index: int = -1, default: Any = 0) -&gt; Any:\n    \"\"\"Return value from `index`th position in the `sequence` if exists, otherwise return `default` value.\n\n    Args:\n        sequence: The input sequence.\n        index: Index to be returned.\n        default: Default value to be returned if `index` is out of range.\n\n    Returns:\n        The value from the sequence at `index` position if exists, `default` otherwise.\n    \"\"\"\n    try:\n        return sequence[index]\n    except IndexError:\n        return default\n</code></pre>"},{"location":"reference/talipp/input/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> input","text":""},{"location":"reference/talipp/input/#talipp.input","title":"input","text":"<p>The module contains functionality related to the processing of indicators' input.</p>"},{"location":"reference/talipp/input/#talipp.input.Sampler","title":"Sampler","text":"<pre><code>Sampler(period_type: SamplingPeriodType)\n</code></pre> <p>Implementation of timeframe auto-sampling.</p> <p>Timeframe auto-sampling allows to evaluate whether two timestamps belong into the same period or not. This is later used by indicators to \"merge\" several input values received within selected timeframe and keep only the last value in the given timeframe.</p> <p>Each timeframe is counted from different starting point. Seconds are counted since whole minutes, minutes are counted since whole hours, hours are counted since whole days and days are counted since the beginning of the year.</p> <p>Examples:</p> <pre><code>Sampling: 1 sec\nTimestamp 1: 00:00:01.000000\nTimestamp 2: 00:00:01.700000\nResult: same timeframe\n\nSampling: 5 sec\nTimestamp 1: 00:00:01.000000\nTimestamp 2: 00:00:04.000000\nResult: same timeframe\n\nSampling: 5 sec\nTimestamp 1: 00:00:04.000000\nTimestamp 2: 00:00:06.000000\nResult: different timeframe\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>period_type</code> <code>SamplingPeriodType</code> <p>The sampling period.</p> required Source code in <code>talipp/input.py</code> <pre><code>def __init__(self, period_type: SamplingPeriodType):\n    self._period_type: SamplingPeriodType = period_type\n</code></pre>"},{"location":"reference/talipp/input/#talipp.input.Sampler.is_same_period","title":"is_same_period","text":"<pre><code>is_same_period(first: OHLCV, second: OHLCV) -&gt; bool\n</code></pre> <p>Evaluate whether two OHLCV objects belong to the same period.</p> <p><code>OHLCV</code> objects have to contain time component to be comparable.</p> <p>Parameters:</p> Name Type Description Default <code>first</code> <code>OHLCV</code> <p>The first <code>OHLCV</code> object.</p> required <code>second</code> <code>OHLCV</code> <p>The second <code>OHLCV</code> object.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if two objects belong to the same period, otherwise <code>False</code>.</p> Source code in <code>talipp/input.py</code> <pre><code>def is_same_period(self, first: OHLCV, second: OHLCV) -&gt; bool:\n    \"\"\"Evaluate whether two [OHLCV][talipp.ohlcv.OHLCV] objects belong to the same period.\n\n    `OHLCV` objects have to contain time component to be comparable.\n\n    Args:\n        first: The first `OHLCV` object.\n        second: The second `OHLCV` object.\n\n    Returns:\n        `True` if two objects belong to the same period, otherwise `False`.\n    \"\"\"\n\n    first_normalized = self._normalize(first.time)\n    second_normalized = self._normalize(second.time)\n\n    return first_normalized == second_normalized\n</code></pre>"},{"location":"reference/talipp/input/#talipp.input.SamplingPeriodType","title":"SamplingPeriodType","text":"<p>               Bases: <code>Enum</code></p> <p>Available sampling periods.</p> <p>Each sampling period consists of a unit and its span. E.g. <code>SEC_1</code> means sampling every second, <code>SEC_3</code> means sampling every three seconds and so on.</p> Note <p>Only those spans are allowed which divide full unit's period without remainder.</p> <pre><code>3 seconds =&gt; OK (60 % 3 = 0)\n5 seconds =&gt; OK (60 % 5 = 0)\n8 seconds =&gt; NOT OK (60 % 8 != 0)\n4 hours   =&gt; OK (24 % 4 = 0)\n5 hours   =&gt; NOT OK (24 % 5 != 0)\n</code></pre>"},{"location":"reference/talipp/input/#talipp.input.SamplingPeriodType.DAY_1","title":"DAY_1  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DAY_1 = (DAY, 1)\n</code></pre> <p>1 day</p>"},{"location":"reference/talipp/input/#talipp.input.SamplingPeriodType.HOUR_1","title":"HOUR_1  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>HOUR_1 = (HOUR, 1)\n</code></pre> <p>1 hour</p>"},{"location":"reference/talipp/input/#talipp.input.SamplingPeriodType.HOUR_2","title":"HOUR_2  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>HOUR_2 = (HOUR, 2)\n</code></pre> <p>2 hours</p>"},{"location":"reference/talipp/input/#talipp.input.SamplingPeriodType.HOUR_3","title":"HOUR_3  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>HOUR_3 = (HOUR, 3)\n</code></pre> <p>3 hours</p>"},{"location":"reference/talipp/input/#talipp.input.SamplingPeriodType.HOUR_4","title":"HOUR_4  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>HOUR_4 = (HOUR, 4)\n</code></pre> <p>4 hours</p>"},{"location":"reference/talipp/input/#talipp.input.SamplingPeriodType.MIN_1","title":"MIN_1  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>MIN_1 = (MIN, 1)\n</code></pre> <p>1 minute</p>"},{"location":"reference/talipp/input/#talipp.input.SamplingPeriodType.MIN_10","title":"MIN_10  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>MIN_10 = (MIN, 10)\n</code></pre> <p>10 minutes</p>"},{"location":"reference/talipp/input/#talipp.input.SamplingPeriodType.MIN_15","title":"MIN_15  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>MIN_15 = (MIN, 15)\n</code></pre> <p>15 minutes</p>"},{"location":"reference/talipp/input/#talipp.input.SamplingPeriodType.MIN_3","title":"MIN_3  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>MIN_3 = (MIN, 3)\n</code></pre> <p>3 minutes</p>"},{"location":"reference/talipp/input/#talipp.input.SamplingPeriodType.MIN_30","title":"MIN_30  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>MIN_30 = (MIN, 30)\n</code></pre> <p>30 minutes</p>"},{"location":"reference/talipp/input/#talipp.input.SamplingPeriodType.MIN_5","title":"MIN_5  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>MIN_5 = (MIN, 5)\n</code></pre> <p>5 minutes</p>"},{"location":"reference/talipp/input/#talipp.input.SamplingPeriodType.SEC_1","title":"SEC_1  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SEC_1 = (SEC, 1)\n</code></pre> <p>1 second</p>"},{"location":"reference/talipp/input/#talipp.input.SamplingPeriodType.SEC_10","title":"SEC_10  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SEC_10 = (SEC, 10)\n</code></pre> <p>10 seconds</p>"},{"location":"reference/talipp/input/#talipp.input.SamplingPeriodType.SEC_15","title":"SEC_15  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SEC_15 = (SEC, 15)\n</code></pre> <p>15 seconds</p>"},{"location":"reference/talipp/input/#talipp.input.SamplingPeriodType.SEC_3","title":"SEC_3  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SEC_3 = (SEC, 3)\n</code></pre> <p>3 seconds</p>"},{"location":"reference/talipp/input/#talipp.input.SamplingPeriodType.SEC_30","title":"SEC_30  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SEC_30 = (SEC, 30)\n</code></pre> <p>30 seconds</p>"},{"location":"reference/talipp/input/#talipp.input.SamplingPeriodType.SEC_5","title":"SEC_5  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SEC_5 = (SEC, 5)\n</code></pre> <p>5 seconds</p>"},{"location":"reference/talipp/ma/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> ma","text":""},{"location":"reference/talipp/ma/#talipp.ma","title":"ma","text":"<p>Utilities for moving averages.</p>"},{"location":"reference/talipp/ma/#talipp.ma.MAFactory","title":"MAFactory","text":"<p>Moving average object factory.</p>"},{"location":"reference/talipp/ma/#talipp.ma.MAFactory.get_ma","title":"get_ma  <code>staticmethod</code>","text":"<pre><code>get_ma(\n    ma_type: MAType,\n    period: int,\n    input_values: List[float] = None,\n    input_indicator: Indicator = None,\n    input_modifier: InputModifierType = None,\n) -&gt; Indicator\n</code></pre> <p>Return a moving average indicator for given moving average type.</p> <p>Only moving averages which do not have other than <code>period</code> parameter can be generated (unless they provide default values for them).</p> <p>Parameters:</p> Name Type Description Default <code>ma_type</code> <code>MAType</code> <p>The moving average to be generated.</p> required <code>period</code> <code>int</code> <p>The period to be passed into the moving average object.</p> required <code>input_values</code> <code>List[float]</code> <p>The input values to be passed into the moving average object.</p> <code>None</code> <code>input_indicator</code> <code>Indicator</code> <p>The input indicator to be passed into the moving average object.</p> <code>None</code> <code>input_modifier</code> <code>InputModifierType</code> <p>The input modifier to be passed into the moving average object.</p> <code>None</code> <p>Returns:</p> Type Description <code>Indicator</code> <p>Moving average indicator.</p> <p>Raises:</p> Type Description <code>TalippException</code> <p>Unsupported moving average type passed in.</p> Source code in <code>talipp/ma.py</code> <pre><code>@staticmethod\ndef get_ma(ma_type: MAType,\n           period: int,\n           input_values: List[float] = None,\n           input_indicator: Indicator = None,\n           input_modifier: InputModifierType = None) -&gt; Indicator:\n    \"\"\"Return a moving average indicator for given [moving average type][talipp.ma.MAType].\n\n        Only moving averages which do not have other than `period` parameter can be generated (unless they provide default values for them).\n\n        Args:\n            ma_type: The moving average to be generated.\n            period: The period to be passed into the moving average object.\n            input_values: The input values to be passed into the moving average object.\n            input_indicator: The input indicator to be passed into the moving average object.\n            input_modifier: The input modifier to be passed into the moving average object.\n\n        Returns:\n            Moving average indicator.\n\n        Raises:\n            TalippException: Unsupported moving average type passed in.\n        \"\"\"\n    if ma_type == MAType.SMA:\n        return SMA(period=period, input_values=input_values, input_indicator=input_indicator, input_modifier=input_modifier)\n    elif ma_type == MAType.SMMA:\n        return SMMA(period=period, input_values=input_values, input_indicator=input_indicator, input_modifier=input_modifier)\n    elif ma_type == MAType.DEMA:\n        return DEMA(period=period, input_values=input_values, input_indicator=input_indicator, input_modifier=input_modifier)\n    elif ma_type == MAType.EMA:\n        return EMA(period=period, input_values=input_values, input_indicator=input_indicator, input_modifier=input_modifier)\n    elif ma_type == MAType.TEMA:\n        return TEMA(period=period, input_values=input_values, input_indicator=input_indicator, input_modifier=input_modifier)\n    elif ma_type == MAType.HMA:\n        return HMA(period=period, input_values=input_values, input_indicator=input_indicator, input_modifier=input_modifier)\n    elif ma_type == MAType.VWMA:\n        return VWMA(period=period, input_values=input_values, input_indicator=input_indicator, input_modifier=input_modifier)\n    elif ma_type == MAType.WMA:\n        return WMA(period=period, input_values=input_values, input_indicator=input_indicator, input_modifier=input_modifier)\n    elif ma_type == MAType.T3:\n        return T3(period=period, input_values=input_values, input_indicator=input_indicator, input_modifier=input_modifier)\n    elif ma_type == MAType.TRIX:\n        return TRIX(period=period, input_values=input_values, input_indicator=input_indicator, input_modifier=input_modifier)\n    elif ma_type == MAType.ZLEMA:\n        return ZLEMA(period=period, input_values=input_values, input_indicator=input_indicator, input_modifier=input_modifier)\n    else:\n        raise TalippException(f\"Unsupported moving average type {ma_type.name}.\")\n</code></pre>"},{"location":"reference/talipp/ma/#talipp.ma.MAType","title":"MAType","text":"<p>               Bases: <code>Enum</code></p> <p>Moving average type enum.</p>"},{"location":"reference/talipp/ma/#talipp.ma.MAType.ALMA","title":"ALMA  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ALMA = auto()\n</code></pre> <p>Arnaud Legoux Moving Average</p>"},{"location":"reference/talipp/ma/#talipp.ma.MAType.DEMA","title":"DEMA  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DEMA = auto()\n</code></pre> <p>Double Exponential Moving Average</p>"},{"location":"reference/talipp/ma/#talipp.ma.MAType.EMA","title":"EMA  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>EMA = auto()\n</code></pre> <p>Exponential Moving Average</p>"},{"location":"reference/talipp/ma/#talipp.ma.MAType.HMA","title":"HMA  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>HMA = auto()\n</code></pre> <p>Hull Moving Average</p>"},{"location":"reference/talipp/ma/#talipp.ma.MAType.KAMA","title":"KAMA  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>KAMA = auto()\n</code></pre> <p>Kaufman's Adaptive Moving Average</p>"},{"location":"reference/talipp/ma/#talipp.ma.MAType.SMA","title":"SMA  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SMA = auto()\n</code></pre> <p>Standard Moving Average</p>"},{"location":"reference/talipp/ma/#talipp.ma.MAType.SMMA","title":"SMMA  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SMMA = auto()\n</code></pre> <p>Smoothed Moving Average</p>"},{"location":"reference/talipp/ma/#talipp.ma.MAType.T3","title":"T3  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>T3 = auto()\n</code></pre> <p>T3 Moving Average</p>"},{"location":"reference/talipp/ma/#talipp.ma.MAType.TEMA","title":"TEMA  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TEMA = auto()\n</code></pre> <p>Triple Exponential Moving Average</p>"},{"location":"reference/talipp/ma/#talipp.ma.MAType.TRIX","title":"TRIX  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TRIX = auto()\n</code></pre> <p>TRIX</p>"},{"location":"reference/talipp/ma/#talipp.ma.MAType.VWMA","title":"VWMA  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>VWMA = auto()\n</code></pre> <p>Volume Weighted Moving Average</p>"},{"location":"reference/talipp/ma/#talipp.ma.MAType.WMA","title":"WMA  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>WMA = auto()\n</code></pre> <p>Weighted Moving Average</p>"},{"location":"reference/talipp/ma/#talipp.ma.MAType.ZLEMA","title":"ZLEMA  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ZLEMA = auto()\n</code></pre> <p>Zero Lag Exponential Moving Average</p>"},{"location":"reference/talipp/ohlcv/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> ohlcv","text":""},{"location":"reference/talipp/ohlcv/#talipp.ohlcv","title":"ohlcv","text":"<p>Collection of classes related to <code>OHLCV</code> input type.</p>"},{"location":"reference/talipp/ohlcv/#talipp.ohlcv.OHLCV","title":"OHLCV  <code>dataclass</code>","text":"<pre><code>OHLCV(\n    open: Optional[float],\n    high: Optional[float],\n    low: Optional[float],\n    close: Optional[float],\n    volume: Optional[float] = None,\n    time: Optional[datetime] = None,\n)\n</code></pre> <p><code>OHLCV</code> input representation.</p> <p>Attributes:</p> Name Type Description <code>open</code> <code>Optional[float]</code> <p>Open price.</p> <code>high</code> <code>Optional[float]</code> <p>High price.</p> <code>low</code> <code>Optional[float]</code> <p>Low price.</p> <code>close</code> <code>Optional[float]</code> <p>Close price.</p> <code>volume</code> <code>Optional[float]</code> <p>Volume.</p> <code>time</code> <code>Optional[datetime]</code> <p>Timestamp.</p>"},{"location":"reference/talipp/ohlcv/#talipp.ohlcv.OHLCVFactory","title":"OHLCVFactory","text":"<p>Static class serving to create <code>OHLCV</code> input objects from various representations.</p>"},{"location":"reference/talipp/ohlcv/#talipp.ohlcv.OHLCVFactory.from_dict","title":"from_dict  <code>staticmethod</code>","text":"<pre><code>from_dict(values: Dict[str, List[float]]) -&gt; List[OHLCV]\n</code></pre> <p>Converts a dict with OHLCV values into a list of <code>OHLCV</code> objects.</p> <p>The dict consists of <code>open</code>, <code>high</code>, <code>low</code>, <code>close</code>, <code>volume</code> and <code>time</code> keys where each key contains a list of simple values. If some key is missing, corresponding values in OHLCV will be None.</p> <p>Examples:</p> <pre><code>{'open': [1,2], 'close': [3,4]} -&gt; [OHLCV(1, None, None, 3, None, None), OHLCV(2, None, None, 4, None, None)]\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>values</code> <code>Dict[str, List[float]]</code> <p>A dict of values to be converted into <code>OHLCV</code> objects.</p> required <p>Returns:</p> Type Description <code>List[OHLCV]</code> <p>A list of <code>OHLCV</code> objects.</p> Source code in <code>talipp/ohlcv.py</code> <pre><code>@staticmethod\ndef from_dict(values: Dict[str, List[float]]) -&gt; List[OHLCV]:\n    \"\"\"Converts a dict with OHLCV values into a list of `OHLCV` objects.\n\n    The dict consists of `open`, `high`, `low`, `close`, `volume` and `time` keys where each key\n    contains a list of simple values. If some key is missing, corresponding values\n    in OHLCV will be None.\n\n    Examples:\n\n        {'open': [1,2], 'close': [3,4]} -&gt; [OHLCV(1, None, None, 3, None, None), OHLCV(2, None, None, 4, None, None)]\n\n    Args:\n        values: A dict of values to be converted into `OHLCV` objects.\n\n    Returns:\n        A list of `OHLCV` objects.\n    \"\"\"\n\n    return OHLCVFactory.from_matrix2([\n        values['open'] if 'open' in values else [],\n        values['high'] if 'high' in values else [],\n        values['low'] if 'low' in values else [],\n        values['close'] if 'close' in values else [],\n        values['volume'] if 'volume' in values else [],\n        values['time'] if 'time' in values else []\n    ])\n</code></pre>"},{"location":"reference/talipp/ohlcv/#talipp.ohlcv.OHLCVFactory.from_matrix","title":"from_matrix  <code>staticmethod</code>","text":"<pre><code>from_matrix(values: List[List[float]]) -&gt; List[OHLCV]\n</code></pre> <p>Converts lists/tuples representing OHLCV values into a list of <code>OHLCV</code> objects.</p> <p>Expected dimension of input OHLCV list is 4 (without volume and timestamp), 5 (with volume and without timestamp) or 6 (with volume and timestamp).</p> <p>Examples:</p> <pre><code>[[1,2,3,4,5], [6,7,8,9,0]] -&gt; [OHLCV(1,2,3,4,5), OHLCV(6,7,8,9,0)]\n[[1,2,3,4], [6,7,8,9]] -&gt; [OHLCV(1,2,3,4), OHLCV(6,7,8,9)]\n[[1,2,3,4,5,6], [7,8,9,10,11,12]] -&gt; [OHLCV(1,2,3,4,5,6), OHLCV(7,8,9,10,11,12)]\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>values</code> <code>List[List[float]]</code> <p>A list of values to be converted into <code>OHLCV</code> objects.</p> required <p>Returns:</p> Type Description <code>List[OHLCV]</code> <p>A list of <code>OHLCV</code> objects.</p> Source code in <code>talipp/ohlcv.py</code> <pre><code>@staticmethod\ndef from_matrix(values: List[List[float]]) -&gt; List[OHLCV]:\n    \"\"\"Converts lists/tuples representing OHLCV values into a list of `OHLCV` objects.\n\n    Expected dimension of input OHLCV list\n    is 4 (without volume and timestamp), 5 (with volume and without timestamp) or 6 (with volume and timestamp).\n\n    Examples:\n\n        [[1,2,3,4,5], [6,7,8,9,0]] -&gt; [OHLCV(1,2,3,4,5), OHLCV(6,7,8,9,0)]\n        [[1,2,3,4], [6,7,8,9]] -&gt; [OHLCV(1,2,3,4), OHLCV(6,7,8,9)]\n        [[1,2,3,4,5,6], [7,8,9,10,11,12]] -&gt; [OHLCV(1,2,3,4,5,6), OHLCV(7,8,9,10,11,12)]\n\n    Args:\n        values: A list of values to be converted into `OHLCV` objects.\n\n    Returns:\n        A list of `OHLCV` objects.\n    \"\"\"\n\n    return [OHLCV(x[0],\n                  x[1],\n                  x[2],\n                  x[3],\n                  x[4] if len(x) &gt;= 5 else None,\n                  x[5] if len(x) &gt;= 6 else None) for x in values]\n</code></pre>"},{"location":"reference/talipp/ohlcv/#talipp.ohlcv.OHLCVFactory.from_matrix2","title":"from_matrix2  <code>staticmethod</code>","text":"<pre><code>from_matrix2(values: List[List[float]]) -&gt; List[OHLCV]\n</code></pre> <p>Converts lists representing O, H, L, C, V and T values into a list of <code>OHLCV</code> objects.</p> <p>Examples:</p> <pre><code>[[1,2], [3,4], [5,6], [7,8]] -&gt; [OHLCV(1,3,5,7), OHLCV(2,4,6,8)]\n[[1,2], [3,4], [5,6], [7,8], [9,0]] -&gt; [OHLCV(1,3,5,7,9), OHLCV(2,4,6,8,0)]\n[[1,2], [3,4], [5,6], [7,8], [9,0], [11, 12]] -&gt; [OHLCV(1,3,5,7,9,11), OHLCV(2,4,6,8,0,12)]\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>values</code> <code>List[List[float]]</code> <p>A list of values to be converted into <code>OHLCV</code> objects.</p> required <p>Returns:</p> Type Description <code>List[OHLCV]</code> <p>A list of <code>OHLCV</code> objects.</p> Source code in <code>talipp/ohlcv.py</code> <pre><code>@staticmethod\ndef from_matrix2(values: List[List[float]]) -&gt; List[OHLCV]:\n    \"\"\"Converts lists representing O, H, L, C, V and T values into a list of `OHLCV` objects.\n\n    Examples:\n\n        [[1,2], [3,4], [5,6], [7,8]] -&gt; [OHLCV(1,3,5,7), OHLCV(2,4,6,8)]\n        [[1,2], [3,4], [5,6], [7,8], [9,0]] -&gt; [OHLCV(1,3,5,7,9), OHLCV(2,4,6,8,0)]\n        [[1,2], [3,4], [5,6], [7,8], [9,0], [11, 12]] -&gt; [OHLCV(1,3,5,7,9,11), OHLCV(2,4,6,8,0,12)]\n\n    Args:\n        values: A list of values to be converted into `OHLCV` objects.\n\n    Returns:\n        A list of `OHLCV` objects.\n    \"\"\"\n\n    if len(values) == 4:\n        return OHLCVFactory.from_matrix(list(map(list, zip_longest(values[0],\n                                                                   values[1],\n                                                                   values[2],\n                                                                   values[3]))))\n    elif len(values) == 5:\n        return OHLCVFactory.from_matrix(list(map(list, zip_longest(values[0],\n                                                                   values[1],\n                                                                   values[2],\n                                                                   values[3],\n                                                                   values[4]))))\n    else:\n        return OHLCVFactory.from_matrix(list(map(list, zip_longest(values[0],\n                                                                   values[1],\n                                                                   values[2],\n                                                                   values[3],\n                                                                   values[4],\n                                                                   values[5]))))\n</code></pre>"},{"location":"reference/talipp/ohlcv/#talipp.ohlcv.ValueExtractor","title":"ValueExtractor","text":"<p>A set of static methods extracting attributes from <code>OHLCV</code> objects.</p> <p>The methods primarily serve as input modifiers in indicators.</p>"},{"location":"reference/talipp/ohlcv/#talipp.ohlcv.ValueExtractor.extract_close","title":"extract_close  <code>staticmethod</code>","text":"<pre><code>extract_close(value: OHLCV) -&gt; float\n</code></pre> <p>Extract close price.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>OHLCV</code> <p><code>OHLCV</code> value</p> required <p>Returns:</p> Type Description <code>float</code> <p>Close price.</p> Source code in <code>talipp/ohlcv.py</code> <pre><code>@staticmethod\ndef extract_close(value: OHLCV) -&gt; float:\n    \"\"\"Extract close price.\n\n    Args:\n        value: `OHLCV` value\n\n    Returns:\n        Close price.\n    \"\"\"\n\n    return value.close\n</code></pre>"},{"location":"reference/talipp/ohlcv/#talipp.ohlcv.ValueExtractor.extract_high","title":"extract_high  <code>staticmethod</code>","text":"<pre><code>extract_high(value: OHLCV) -&gt; float\n</code></pre> <p>Extract high price.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>OHLCV</code> <p><code>OHLCV</code> value</p> required <p>Returns:</p> Type Description <code>float</code> <p>High price.</p> Source code in <code>talipp/ohlcv.py</code> <pre><code>@staticmethod\ndef extract_high(value: OHLCV) -&gt; float:\n    \"\"\"Extract high price.\n\n    Args:\n        value: `OHLCV` value\n\n    Returns:\n        High price.\n    \"\"\"\n\n    return value.high\n</code></pre>"},{"location":"reference/talipp/ohlcv/#talipp.ohlcv.ValueExtractor.extract_low","title":"extract_low  <code>staticmethod</code>","text":"<pre><code>extract_low(value: OHLCV) -&gt; float\n</code></pre> <p>Extract low price.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>OHLCV</code> <p><code>OHLCV</code> value</p> required <p>Returns:</p> Type Description <code>float</code> <p>Low price.</p> Source code in <code>talipp/ohlcv.py</code> <pre><code>@staticmethod\ndef extract_low(value: OHLCV) -&gt; float:\n    \"\"\"Extract low price.\n\n    Args:\n        value: `OHLCV` value\n\n    Returns:\n        Low price.\n    \"\"\"\n\n    return value.low\n</code></pre>"},{"location":"reference/talipp/ohlcv/#talipp.ohlcv.ValueExtractor.extract_open","title":"extract_open  <code>staticmethod</code>","text":"<pre><code>extract_open(value: OHLCV) -&gt; float\n</code></pre> <p>Extract open price.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>OHLCV</code> <p><code>OHLCV</code> value</p> required <p>Returns:</p> Type Description <code>float</code> <p>Open price.</p> Source code in <code>talipp/ohlcv.py</code> <pre><code>@staticmethod\ndef extract_open(value: OHLCV) -&gt; float:\n    \"\"\"Extract open price.\n\n    Args:\n        value: `OHLCV` value\n\n    Returns:\n        Open price.\n    \"\"\"\n\n    return value.open\n</code></pre>"},{"location":"reference/talipp/ohlcv/#talipp.ohlcv.ValueExtractor.extract_volume","title":"extract_volume  <code>staticmethod</code>","text":"<pre><code>extract_volume(value: OHLCV) -&gt; float\n</code></pre> <p>Extract volume.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>OHLCV</code> <p><code>OHLCV</code> value</p> required <p>Returns:</p> Type Description <code>float</code> <p>Volume.</p> Source code in <code>talipp/ohlcv.py</code> <pre><code>@staticmethod\ndef extract_volume(value: OHLCV) -&gt; float:\n    \"\"\"Extract volume.\n\n    Args:\n        value: `OHLCV` value\n\n    Returns:\n        Volume.\n    \"\"\"\n\n    return value.volume\n</code></pre>"},{"location":"reference/talipp/indicators/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> indicators","text":""},{"location":"reference/talipp/indicators/#talipp.indicators","title":"indicators","text":""},{"location":"reference/talipp/indicators/ADX/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> ADX","text":""},{"location":"reference/talipp/indicators/ADX/#talipp.indicators.ADX","title":"ADX","text":""},{"location":"reference/talipp/indicators/ADX/#talipp.indicators.ADX.ADX","title":"ADX","text":"<pre><code>ADX(\n    di_period: int,\n    adx_period: int,\n    input_values: List[OHLCV] = None,\n    input_indicator: Indicator = None,\n    input_modifier: InputModifierType = None,\n    input_sampling: SamplingPeriodType = None,\n)\n</code></pre> <p>               Bases: <code>Indicator</code></p> <p>Average Directional Index.</p> <p>Input type: OHLCV</p> <p>Output type: ADXVal</p> <p>Parameters:</p> Name Type Description Default <code>di_period</code> <code>int</code> <p>Directional Index period.</p> required <code>adx_period</code> <code>int</code> <p>Average Directional Index period.</p> required <code>input_values</code> <code>List[OHLCV]</code> <p>List of input values.</p> <code>None</code> <code>input_indicator</code> <code>Indicator</code> <p>Input indicator.</p> <code>None</code> <code>input_modifier</code> <code>InputModifierType</code> <p>Input modifier.</p> <code>None</code> <code>input_sampling</code> <code>SamplingPeriodType</code> <p>Input sampling type.</p> <code>None</code> Source code in <code>talipp/indicators/ADX.py</code> <pre><code>def __init__(self, di_period: int,\n             adx_period: int,\n             input_values: List[OHLCV] = None,\n             input_indicator: Indicator = None,\n             input_modifier: InputModifierType = None,\n             input_sampling: SamplingPeriodType = None):\n    super().__init__(input_modifier=input_modifier,\n                     output_value_type=ADXVal,\n                     input_sampling=input_sampling)\n\n    self.di_period = di_period\n    self.adx_period = adx_period\n\n    self.atr = ATR(di_period)\n    self.add_sub_indicator(self.atr)\n\n    # plus directional movement\n    self.pdm = []\n    # minus directional movement\n    self.mdm = []\n\n    self.add_managed_sequence(self.pdm)\n    self.add_managed_sequence(self.mdm)\n\n    # smoothed plus directional movement\n    self.spdm = []\n    # smoothed minus directional movement\n    self.smdm = []\n\n    self.add_managed_sequence(self.spdm)\n    self.add_managed_sequence(self.smdm)\n\n    # plus directional index\n    self.pdi = []\n    # minus directional index\n    self.mdi = []\n\n    self.add_managed_sequence(self.pdi)\n    self.add_managed_sequence(self.mdi)\n\n    # directional index\n    self.dx = []\n    self.add_managed_sequence(self.dx)\n\n    self.initialize(input_values, input_indicator)\n</code></pre>"},{"location":"reference/talipp/indicators/ADX/#talipp.indicators.ADX.ADXVal","title":"ADXVal  <code>dataclass</code>","text":"<pre><code>ADXVal(\n    adx: float = None,\n    plus_di: float = None,\n    minus_di: float = None,\n)\n</code></pre> <p><code>ADX</code> output type.</p> <p>Parameters:</p> Name Type Description Default <code>adx</code> <code>float</code> <p>ADX.</p> <code>None</code> <code>plus_di</code> <code>float</code> <p>Plus Directional Movement.</p> <code>None</code> <code>minus_di</code> <code>float</code> <p>Minus Directional Movement.</p> <code>None</code>"},{"location":"reference/talipp/indicators/ALMA/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> ALMA","text":""},{"location":"reference/talipp/indicators/ALMA/#talipp.indicators.ALMA","title":"ALMA","text":""},{"location":"reference/talipp/indicators/ALMA/#talipp.indicators.ALMA.ALMA","title":"ALMA","text":"<pre><code>ALMA(\n    period: int,\n    offset: float,\n    sigma: float,\n    input_values: List[float] = None,\n    input_indicator: Indicator = None,\n    input_modifier: InputModifierType = None,\n    input_sampling: SamplingPeriodType = None,\n)\n</code></pre> <p>               Bases: <code>Indicator</code></p> <p>Arnaud Legoux Moving Average.</p> <p>Input type: <code>float</code></p> <p>Output type: <code>float</code></p> <p>Parameters:</p> Name Type Description Default <code>period</code> <code>int</code> <p>Moving average period.</p> required <code>offset</code> <code>float</code> <p>Weights offset.</p> required <code>sigma</code> <code>float</code> <p>Weights sigma factor.</p> required <code>input_values</code> <code>List[float]</code> <p>List of input values.</p> <code>None</code> <code>input_indicator</code> <code>Indicator</code> <p>Input indicator.</p> <code>None</code> <code>input_modifier</code> <code>InputModifierType</code> <p>Input modifier.</p> <code>None</code> <code>input_sampling</code> <code>SamplingPeriodType</code> <p>Input sampling type.</p> <code>None</code> Source code in <code>talipp/indicators/ALMA.py</code> <pre><code>def __init__(self, period: int,\n             offset: float,\n             sigma: float,\n             input_values: List[float] = None,\n             input_indicator: Indicator = None,\n             input_modifier: InputModifierType = None,\n             input_sampling: SamplingPeriodType = None):\n    super().__init__(input_modifier=input_modifier,\n                     input_sampling=input_sampling)\n\n    self.period = period\n    self.offset = offset\n    self.sigma = sigma\n\n    # calculate weights and normalisation factor (w_sum)\n    self.w = []\n    self.w_sum = 0.0\n    s = self.period / float(self.sigma)\n    m = (self.period - 1) * self.offset\n    for i in range(0, self.period):\n        self.w.append(exp(-1 * (i - m) * (i - m) / (2 * s * s)))\n        self.w_sum += self.w[-1]\n\n    self.initialize(input_values, input_indicator)\n</code></pre>"},{"location":"reference/talipp/indicators/AO/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> AO","text":""},{"location":"reference/talipp/indicators/AO/#talipp.indicators.AO","title":"AO","text":""},{"location":"reference/talipp/indicators/AO/#talipp.indicators.AO.AO","title":"AO","text":"<pre><code>AO(\n    fast_period: int,\n    slow_period: int,\n    input_values: List[OHLCV] = None,\n    input_indicator: Indicator = None,\n    input_modifier: InputModifierType = None,\n    ma_type: MAType = MAType.SMA,\n    input_sampling: SamplingPeriodType = None,\n)\n</code></pre> <p>               Bases: <code>Indicator</code></p> <p>Awesome Oscillator.</p> <p>Input type: OHLCV</p> <p>Output type: <code>float</code></p> <p>Parameters:</p> Name Type Description Default <code>fast_period</code> <code>int</code> <p>Fast moving average period.</p> required <code>slow_period</code> <code>int</code> <p>Slow moving average period.</p> required <code>input_values</code> <code>List[OHLCV]</code> <p>List of input values.</p> <code>None</code> <code>input_indicator</code> <code>Indicator</code> <p>Input indicator.</p> <code>None</code> <code>input_modifier</code> <code>InputModifierType</code> <p>Input modifier.</p> <code>None</code> <code>ma_type</code> <code>MAType</code> <p>Moving average type.</p> <code>SMA</code> <code>input_sampling</code> <code>SamplingPeriodType</code> <p>Input sampling type.</p> <code>None</code> Source code in <code>talipp/indicators/AO.py</code> <pre><code>def __init__(self, fast_period: int,\n             slow_period: int,\n             input_values: List[OHLCV] = None,\n             input_indicator: Indicator = None,\n             input_modifier: InputModifierType = None,\n             ma_type: MAType = MAType.SMA,\n             input_sampling: SamplingPeriodType = None):\n    super().__init__(input_modifier=input_modifier,\n                     input_sampling=input_sampling)\n\n    self.fast_period = fast_period\n    self.slow_period = slow_period\n\n    self.ma_fast = MAFactory.get_ma(ma_type, fast_period)\n    self.ma_slow = MAFactory.get_ma(ma_type, slow_period)\n\n    self.add_managed_sequence(self.ma_fast)\n    self.add_managed_sequence(self.ma_slow)\n\n    self.initialize(input_values, input_indicator)\n</code></pre>"},{"location":"reference/talipp/indicators/ATR/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> ATR","text":""},{"location":"reference/talipp/indicators/ATR/#talipp.indicators.ATR","title":"ATR","text":""},{"location":"reference/talipp/indicators/ATR/#talipp.indicators.ATR.ATR","title":"ATR","text":"<pre><code>ATR(\n    period: int,\n    input_values: List[OHLCV] = None,\n    input_indicator: Indicator = None,\n    input_modifier: InputModifierType = None,\n    input_sampling: SamplingPeriodType = None,\n)\n</code></pre> <p>               Bases: <code>Indicator</code></p> <p>Average True Range</p> <p>Input type: OHLCV</p> <p>Output type: <code>float</code></p> <p>Parameters:</p> Name Type Description Default <code>period</code> <code>int</code> <p>Period.</p> required <code>input_values</code> <code>List[OHLCV]</code> <p>List of input values.</p> <code>None</code> <code>input_indicator</code> <code>Indicator</code> <p>Input indicator.</p> <code>None</code> <code>input_modifier</code> <code>InputModifierType</code> <p>Input modifier.</p> <code>None</code> <code>input_sampling</code> <code>SamplingPeriodType</code> <p>Input sampling type.</p> <code>None</code> Source code in <code>talipp/indicators/ATR.py</code> <pre><code>def __init__(self, period: int,\n             input_values: List[OHLCV] = None,\n             input_indicator: Indicator = None,\n             input_modifier: InputModifierType = None,\n             input_sampling: SamplingPeriodType = None):\n    super(ATR, self).__init__(input_modifier=input_modifier,\n                              input_sampling=input_sampling)\n\n    self.period = period\n    self.tr = []\n\n    self.add_managed_sequence(self.tr)\n\n    self.initialize(input_values, input_indicator)\n</code></pre>"},{"location":"reference/talipp/indicators/AccuDist/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> AccuDist","text":""},{"location":"reference/talipp/indicators/AccuDist/#talipp.indicators.AccuDist","title":"AccuDist","text":""},{"location":"reference/talipp/indicators/AccuDist/#talipp.indicators.AccuDist.AccuDist","title":"AccuDist","text":"<pre><code>AccuDist(\n    input_values: List[OHLCV] = None,\n    input_indicator: Indicator = None,\n    input_modifier: InputModifierType = None,\n    input_sampling: SamplingPeriodType = None,\n)\n</code></pre> <p>               Bases: <code>Indicator</code></p> <p>Accumulation and Distribution Line.</p> <p>Input type: OHLCV</p> <p>Output type: <code>float</code></p> <p>Parameters:</p> Name Type Description Default <code>input_values</code> <code>List[OHLCV]</code> <p>List of input values.</p> <code>None</code> <code>input_indicator</code> <code>Indicator</code> <p>Input indicator.</p> <code>None</code> <code>input_modifier</code> <code>InputModifierType</code> <p>Input modifier.</p> <code>None</code> <code>input_sampling</code> <code>SamplingPeriodType</code> <p>Input sampling type.</p> <code>None</code> Source code in <code>talipp/indicators/AccuDist.py</code> <pre><code>def __init__(self, input_values: List[OHLCV] = None,\n             input_indicator: Indicator = None,\n             input_modifier: InputModifierType = None,\n             input_sampling: SamplingPeriodType = None):\n    super().__init__(\n        input_modifier=input_modifier,\n        input_sampling=input_sampling)\n\n    self.initialize(input_values, input_indicator)\n</code></pre>"},{"location":"reference/talipp/indicators/Aroon/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> Aroon","text":""},{"location":"reference/talipp/indicators/Aroon/#talipp.indicators.Aroon","title":"Aroon","text":""},{"location":"reference/talipp/indicators/Aroon/#talipp.indicators.Aroon.Aroon","title":"Aroon","text":"<pre><code>Aroon(\n    period: int,\n    input_values: List[OHLCV] = None,\n    input_indicator: Indicator = None,\n    input_modifier: InputModifierType = None,\n    input_sampling: SamplingPeriodType = None,\n)\n</code></pre> <p>               Bases: <code>Indicator</code></p> <p>Aroon Up/Down</p> <p>Input type: OHLCV</p> <p>Output type: AroonVal</p> <p>Parameters:</p> Name Type Description Default <code>period</code> <code>int</code> <p>Aroon period.</p> required <code>input_values</code> <code>List[OHLCV]</code> <p>List of input values.</p> <code>None</code> <code>input_indicator</code> <code>Indicator</code> <p>Input indicator.</p> <code>None</code> <code>input_modifier</code> <code>InputModifierType</code> <p>Input modifier.</p> <code>None</code> <code>input_sampling</code> <code>SamplingPeriodType</code> <p>Input sampling type.</p> <code>None</code> Source code in <code>talipp/indicators/Aroon.py</code> <pre><code>def __init__(self, period: int,\n             input_values: List[OHLCV] = None,\n             input_indicator: Indicator = None,\n             input_modifier: InputModifierType = None,\n             input_sampling: SamplingPeriodType = None):\n    super().__init__(input_modifier=input_modifier,\n                     output_value_type=AroonVal,\n                     input_sampling=input_sampling)\n\n    self.period = period\n\n    self.initialize(input_values, input_indicator)\n</code></pre>"},{"location":"reference/talipp/indicators/Aroon/#talipp.indicators.Aroon.AroonVal","title":"AroonVal  <code>dataclass</code>","text":"<pre><code>AroonVal(up: float = None, down: float = None)\n</code></pre> <p><code>Aroon</code> output type.</p> <p>Parameters:</p> Name Type Description Default <code>up</code> <code>float</code> <p>Aroon up.</p> <code>None</code> <code>down</code> <code>float</code> <p>Aroon down.</p> <code>None</code>"},{"location":"reference/talipp/indicators/BB/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> BB","text":""},{"location":"reference/talipp/indicators/BB/#talipp.indicators.BB","title":"BB","text":""},{"location":"reference/talipp/indicators/BB/#talipp.indicators.BB.BB","title":"BB","text":"<pre><code>BB(\n    period: int,\n    std_dev_mult: float,\n    input_values: List[float] = None,\n    input_indicator: Indicator = None,\n    input_modifier: InputModifierType = None,\n    ma_type: MAType = MAType.SMA,\n    input_sampling: SamplingPeriodType = None,\n)\n</code></pre> <p>               Bases: <code>Indicator</code></p> <p>Bollinger Bands.</p> <p>Input type: <code>float</code></p> <p>Output type: BBVal</p> <p>Parameters:</p> Name Type Description Default <code>period</code> <code>int</code> <p>Period.</p> required <code>std_dev_mult</code> <code>float</code> <p>Standard deviation multiplier.</p> required <code>input_values</code> <code>List[float]</code> <p>List of input values.</p> <code>None</code> <code>input_indicator</code> <code>Indicator</code> <p>Input indicator.</p> <code>None</code> <code>input_modifier</code> <code>InputModifierType</code> <p>Input modifier.</p> <code>None</code> <code>input_sampling</code> <code>SamplingPeriodType</code> <p>Input sampling type.</p> <code>None</code> Source code in <code>talipp/indicators/BB.py</code> <pre><code>def __init__(self, period: int,\n             std_dev_mult: float,\n             input_values: List[float] = None,\n             input_indicator: Indicator = None,\n             input_modifier: InputModifierType = None,\n             ma_type: MAType = MAType.SMA,\n             input_sampling: SamplingPeriodType = None):\n    super().__init__(input_modifier=input_modifier,\n                     output_value_type=BBVal,\n                     input_sampling=input_sampling)\n\n    self.period = period\n    self.std_dev_mult = std_dev_mult\n\n    self.central_band = MAFactory.get_ma(ma_type, period)\n    self.std_dev = StdDev(self.period)\n\n    self.add_sub_indicator(self.central_band)\n    self.add_sub_indicator(self.std_dev)\n\n    self.initialize(input_values, input_indicator)\n</code></pre>"},{"location":"reference/talipp/indicators/BB/#talipp.indicators.BB.BBVal","title":"BBVal  <code>dataclass</code>","text":"<pre><code>BBVal(lb: float = None, cb: float = None, ub: float = None)\n</code></pre> <p><code>BB</code> output type.</p> <p>Parameters:</p> Name Type Description Default <code>lb</code> <code>float</code> <p>Lower band.</p> <code>None</code> <code>cb</code> <code>float</code> <p>Central band.</p> <code>None</code> <code>ub</code> <code>float</code> <p>Upper band.</p> <code>None</code>"},{"location":"reference/talipp/indicators/BOP/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> BOP","text":""},{"location":"reference/talipp/indicators/BOP/#talipp.indicators.BOP","title":"BOP","text":""},{"location":"reference/talipp/indicators/BOP/#talipp.indicators.BOP.BOP","title":"BOP","text":"<pre><code>BOP(\n    input_values: List[OHLCV] = None,\n    input_indicator: Indicator = None,\n    input_modifier: InputModifierType = None,\n    input_sampling: SamplingPeriodType = None,\n)\n</code></pre> <p>               Bases: <code>Indicator</code></p> <p>Balance Of Power.</p> <p>Input type: <code>float</code></p> <p>Output type: <code>float</code></p> <p>Parameters:</p> Name Type Description Default <code>input_values</code> <code>List[OHLCV]</code> <p>List of input values.</p> <code>None</code> <code>input_indicator</code> <code>Indicator</code> <p>Input indicator.</p> <code>None</code> <code>input_modifier</code> <code>InputModifierType</code> <p>Input modifier.</p> <code>None</code> <code>input_sampling</code> <code>SamplingPeriodType</code> <p>Input sampling type.</p> <code>None</code> Source code in <code>talipp/indicators/BOP.py</code> <pre><code>def __init__(self, input_values: List[OHLCV] = None,\n             input_indicator: Indicator = None,\n             input_modifier: InputModifierType = None,\n             input_sampling: SamplingPeriodType = None):\n    super().__init__(input_modifier=input_modifier,\n                     input_sampling=input_sampling)\n\n    self.initialize(input_values, input_indicator)\n</code></pre>"},{"location":"reference/talipp/indicators/CCI/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> CCI","text":""},{"location":"reference/talipp/indicators/CCI/#talipp.indicators.CCI","title":"CCI","text":""},{"location":"reference/talipp/indicators/CCI/#talipp.indicators.CCI.CCI","title":"CCI","text":"<pre><code>CCI(\n    period: int,\n    input_values: List[OHLCV] = None,\n    input_indicator: Indicator = None,\n    input_modifier: InputModifierType = None,\n    input_sampling: SamplingPeriodType = None,\n)\n</code></pre> <p>               Bases: <code>Indicator</code></p> <p>Commodity Channel Index.</p> <p>Input type: OHLCV</p> <p>Output type: <code>float</code></p> <p>Parameters:</p> Name Type Description Default <code>period</code> <code>int</code> <p>Period.</p> required <code>input_values</code> <code>List[OHLCV]</code> <p>List of input values.</p> <code>None</code> <code>input_indicator</code> <code>Indicator</code> <p>Input indicator.</p> <code>None</code> <code>input_modifier</code> <code>InputModifierType</code> <p>Input modifier.</p> <code>None</code> <code>input_sampling</code> <code>SamplingPeriodType</code> <p>Input sampling type.</p> <code>None</code> Source code in <code>talipp/indicators/CCI.py</code> <pre><code>def __init__(self, period: int,\n             input_values: List[OHLCV] = None,\n             input_indicator: Indicator = None,\n             input_modifier: InputModifierType = None,\n             input_sampling: SamplingPeriodType = None):\n    super().__init__(input_modifier=input_modifier,\n                     input_sampling=input_sampling)\n\n    self.mean_dev = MeanDev(period)\n    self.add_managed_sequence(self.mean_dev)\n\n    self.initialize(input_values, input_indicator)\n</code></pre>"},{"location":"reference/talipp/indicators/CHOP/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> CHOP","text":""},{"location":"reference/talipp/indicators/CHOP/#talipp.indicators.CHOP","title":"CHOP","text":""},{"location":"reference/talipp/indicators/CHOP/#talipp.indicators.CHOP.CHOP","title":"CHOP","text":"<pre><code>CHOP(\n    period: int,\n    input_values: List[OHLCV] = None,\n    input_indicator: Indicator = None,\n    input_modifier: InputModifierType = None,\n    input_sampling: SamplingPeriodType = None,\n)\n</code></pre> <p>               Bases: <code>Indicator</code></p> <p>Choppiness Index.</p> <p>Input type: OHLCV</p> <p>Output type: <code>float</code></p> <p>Parameters:</p> Name Type Description Default <code>period</code> <code>int</code> <p>Period.</p> required <code>input_values</code> <code>List[OHLCV]</code> <p>List of input values.</p> <code>None</code> <code>input_indicator</code> <code>Indicator</code> <p>Input indicator.</p> <code>None</code> <code>input_modifier</code> <code>InputModifierType</code> <p>Input modifier.</p> <code>None</code> <code>input_sampling</code> <code>SamplingPeriodType</code> <p>Input sampling type.</p> <code>None</code> Source code in <code>talipp/indicators/CHOP.py</code> <pre><code>def __init__(self, period: int,\n             input_values: List[OHLCV] = None,\n             input_indicator: Indicator = None,\n             input_modifier: InputModifierType = None,\n             input_sampling: SamplingPeriodType = None):\n    super().__init__(input_modifier=input_modifier,\n                     input_sampling=input_sampling)\n\n    self.period = period\n\n    self.atr = ATR(1)\n    self.add_sub_indicator(self.atr)\n\n    self.initialize(input_values, input_indicator)\n</code></pre>"},{"location":"reference/talipp/indicators/ChaikinOsc/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> ChaikinOsc","text":""},{"location":"reference/talipp/indicators/ChaikinOsc/#talipp.indicators.ChaikinOsc","title":"ChaikinOsc","text":""},{"location":"reference/talipp/indicators/ChaikinOsc/#talipp.indicators.ChaikinOsc.ChaikinOsc","title":"ChaikinOsc","text":"<pre><code>ChaikinOsc(\n    fast_period: int,\n    slow_period: int,\n    input_values: List[OHLCV] = None,\n    input_indicator: Indicator = None,\n    input_modifier: InputModifierType = None,\n    ma_type: MAType = MAType.EMA,\n    input_sampling: SamplingPeriodType = None,\n)\n</code></pre> <p>               Bases: <code>Indicator</code></p> <p>Chaikin Oscillator.</p> <p>Input type: OHLCV</p> <p>Output type: <code>float</code></p> <p>Parameters:</p> Name Type Description Default <code>fast_period</code> <code>int</code> <p>Fast moving average period.</p> required <code>slow_period</code> <code>int</code> <p>Slow moving average period.</p> required <code>input_values</code> <code>List[OHLCV]</code> <p>List of input values.</p> <code>None</code> <code>input_indicator</code> <code>Indicator</code> <p>Input indicator.</p> <code>None</code> <code>input_modifier</code> <code>InputModifierType</code> <p>Input modifier.</p> <code>None</code> <code>input_sampling</code> <code>SamplingPeriodType</code> <p>Input sampling type.</p> <code>None</code> Source code in <code>talipp/indicators/ChaikinOsc.py</code> <pre><code>def __init__(self, fast_period: int,\n             slow_period: int,\n             input_values: List[OHLCV] = None,\n             input_indicator: Indicator = None,\n             input_modifier: InputModifierType = None,\n             ma_type: MAType = MAType.EMA,\n             input_sampling: SamplingPeriodType = None):\n    super().__init__(input_modifier=input_modifier,\n                     input_sampling=input_sampling)\n\n    self.fast_period = fast_period\n    self.slow_period = slow_period\n\n    self.accu_dist = AccuDist()\n    self.add_sub_indicator(self.accu_dist)\n\n    self.ma_fast = MAFactory.get_ma(ma_type, fast_period, input_modifier=input_modifier)\n    self.add_managed_sequence(self.ma_fast)\n\n    self.ma_slow = MAFactory.get_ma(ma_type, slow_period, input_modifier=input_modifier)\n    self.add_managed_sequence(self.ma_slow)\n\n    self.initialize(input_values, input_indicator)\n</code></pre>"},{"location":"reference/talipp/indicators/ChandeKrollStop/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> ChandeKrollStop","text":""},{"location":"reference/talipp/indicators/ChandeKrollStop/#talipp.indicators.ChandeKrollStop","title":"ChandeKrollStop","text":""},{"location":"reference/talipp/indicators/ChandeKrollStop/#talipp.indicators.ChandeKrollStop.ChandeKrollStop","title":"ChandeKrollStop","text":"<pre><code>ChandeKrollStop(\n    atr_period: int,\n    atr_mult: float,\n    period: int,\n    input_values: List[OHLCV] = None,\n    input_indicator: Indicator = None,\n    input_modifier: InputModifierType = None,\n    input_sampling: SamplingPeriodType = None,\n)\n</code></pre> <p>               Bases: <code>Indicator</code></p> <p>Chande Kroll Stop.</p> <p>Input type: OHLCV</p> <p>Output type: ChandeKrollStopVal</p> <p>Parameters:</p> Name Type Description Default <code>atr_period</code> <code>int</code> <p>ATR period.</p> required <code>atr_mult</code> <code>float</code> <p>ATR multiplier.</p> required <code>input_values</code> <code>List[OHLCV]</code> <p>List of input values.</p> <code>None</code> <code>input_indicator</code> <code>Indicator</code> <p>Input indicator.</p> <code>None</code> <code>input_modifier</code> <code>InputModifierType</code> <p>Input modifier.</p> <code>None</code> <code>input_sampling</code> <code>SamplingPeriodType</code> <p>Input sampling type.</p> <code>None</code> Source code in <code>talipp/indicators/ChandeKrollStop.py</code> <pre><code>def __init__(self, atr_period: int,\n             atr_mult: float,\n             period: int,\n             input_values: List[OHLCV] = None,\n             input_indicator: Indicator = None,\n             input_modifier: InputModifierType = None,\n             input_sampling: SamplingPeriodType = None):\n    super().__init__(input_modifier=input_modifier,\n                     output_value_type=ChandeKrollStopVal,\n                     input_sampling=input_sampling)\n\n    self.atr_period = atr_period\n    self.atr_mult = atr_mult\n    self.period = period\n\n    self.atr = ATR(atr_period)\n    self.add_sub_indicator(self.atr)\n\n    self.high_stop_list = []\n    self.low_stop_list = []\n    self.add_managed_sequence(self.high_stop_list)\n    self.add_managed_sequence(self.low_stop_list)\n\n    self.initialize(input_values, input_indicator)\n</code></pre>"},{"location":"reference/talipp/indicators/ChandeKrollStop/#talipp.indicators.ChandeKrollStop.ChandeKrollStopVal","title":"ChandeKrollStopVal  <code>dataclass</code>","text":"<pre><code>ChandeKrollStopVal(\n    short_stop: float = None, long_stop: float = None\n)\n</code></pre> <p><code>ChandeKrollStop</code> output type.</p> <p>Parameters:</p> Name Type Description Default <code>short_stop</code> <code>float</code> <p>Stop price for shorts.</p> <code>None</code> <code>long_stop</code> <code>float</code> <p>Stop price for longs.</p> <code>None</code>"},{"location":"reference/talipp/indicators/CoppockCurve/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> CoppockCurve","text":""},{"location":"reference/talipp/indicators/CoppockCurve/#talipp.indicators.CoppockCurve","title":"CoppockCurve","text":""},{"location":"reference/talipp/indicators/CoppockCurve/#talipp.indicators.CoppockCurve.CoppockCurve","title":"CoppockCurve","text":"<pre><code>CoppockCurve(\n    fast_roc_period: int,\n    slow_roc_period: int,\n    wma_period: int,\n    input_values: List[float] = None,\n    input_indicator: Indicator = None,\n    input_modifier: InputModifierType = None,\n    input_sampling: SamplingPeriodType = None,\n)\n</code></pre> <p>               Bases: <code>Indicator</code></p> <p>CoppockCurve.</p> <p>Input type: <code>float</code></p> <p>Output type: <code>float</code></p> <p>Parameters:</p> Name Type Description Default <code>fast_roc_period</code> <code>int</code> <p>Fast ROC period.</p> required <code>slow_roc_period</code> <code>int</code> <p>Slow ROC period.</p> required <code>wma_period</code> <code>int</code> <p>WMA period.</p> required <code>input_values</code> <code>List[float]</code> <p>List of input values.</p> <code>None</code> <code>input_indicator</code> <code>Indicator</code> <p>Input indicator.</p> <code>None</code> <code>input_modifier</code> <code>InputModifierType</code> <p>Input modifier.</p> <code>None</code> <code>input_sampling</code> <code>SamplingPeriodType</code> <p>Input sampling type.</p> <code>None</code> Source code in <code>talipp/indicators/CoppockCurve.py</code> <pre><code>def __init__(self, fast_roc_period: int,\n             slow_roc_period: int,\n             wma_period: int,\n             input_values: List[float] = None,\n             input_indicator: Indicator = None,\n             input_modifier: InputModifierType = None,\n             input_sampling: SamplingPeriodType = None):\n    super().__init__(input_modifier=input_modifier,\n                     input_sampling=input_sampling)\n\n    self.fast_roc = ROC(fast_roc_period)\n    self.add_sub_indicator(self.fast_roc)\n\n    self.slow_roc = ROC(slow_roc_period)\n    self.add_sub_indicator(self.slow_roc)\n\n    self.wma = WMA(wma_period)\n    self.add_managed_sequence(self.wma)\n\n    self.initialize(input_values, input_indicator)\n</code></pre>"},{"location":"reference/talipp/indicators/DEMA/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> DEMA","text":""},{"location":"reference/talipp/indicators/DEMA/#talipp.indicators.DEMA","title":"DEMA","text":""},{"location":"reference/talipp/indicators/DEMA/#talipp.indicators.DEMA.DEMA","title":"DEMA","text":"<pre><code>DEMA(\n    period: int,\n    input_values: List[float] = None,\n    input_indicator: Indicator = None,\n    input_modifier: InputModifierType = None,\n    input_sampling: SamplingPeriodType = None,\n)\n</code></pre> <p>               Bases: <code>Indicator</code></p> <p>Double Exponential Moving Average.</p> <p>Input type: <code>float</code></p> <p>Output type: <code>float</code></p> <p>Parameters:</p> Name Type Description Default <code>period</code> <code>int</code> <p>Period.</p> required <code>input_values</code> <code>List[float]</code> <p>List of input values.</p> <code>None</code> <code>input_indicator</code> <code>Indicator</code> <p>Input indicator.</p> <code>None</code> <code>input_modifier</code> <code>InputModifierType</code> <p>Input modifier.</p> <code>None</code> <code>input_sampling</code> <code>SamplingPeriodType</code> <p>Input sampling type.</p> <code>None</code> Source code in <code>talipp/indicators/DEMA.py</code> <pre><code>def __init__(self, period: int,\n             input_values: List[float] = None,\n             input_indicator: Indicator = None,\n             input_modifier: InputModifierType = None,\n             input_sampling: SamplingPeriodType = None):\n    super().__init__(input_modifier=input_modifier,\n                     input_sampling=input_sampling)\n\n    self.period = period\n\n    self.ema = EMA(period)\n    self.add_sub_indicator(self.ema)\n\n    self.ema_ema = EMA(period)\n    self.add_managed_sequence(self.ema_ema)\n\n    self.initialize(input_values, input_indicator)\n</code></pre>"},{"location":"reference/talipp/indicators/DPO/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> DPO","text":""},{"location":"reference/talipp/indicators/DPO/#talipp.indicators.DPO","title":"DPO","text":""},{"location":"reference/talipp/indicators/DPO/#talipp.indicators.DPO.DPO","title":"DPO","text":"<pre><code>DPO(\n    period: int,\n    input_values: List[float] = None,\n    input_indicator: Indicator = None,\n    input_modifier: InputModifierType = None,\n    ma_type: MAType = MAType.SMA,\n    input_sampling: SamplingPeriodType = None,\n)\n</code></pre> <p>               Bases: <code>Indicator</code></p> <p>Detrended Price Oscillator.</p> <p>Input type: float</p> <p>Output type: <code>float</code></p> <p>Parameters:</p> Name Type Description Default <code>period</code> <code>int</code> <p>Period.</p> required <code>input_values</code> <code>List[float]</code> <p>List of input values.</p> <code>None</code> <code>input_indicator</code> <code>Indicator</code> <p>Input indicator.</p> <code>None</code> <code>input_modifier</code> <code>InputModifierType</code> <p>Input modifier.</p> <code>None</code> <code>ma_type</code> <code>MAType</code> <p>Moving average type.</p> <code>SMA</code> <code>input_sampling</code> <code>SamplingPeriodType</code> <p>Input sampling type.</p> <code>None</code> Source code in <code>talipp/indicators/DPO.py</code> <pre><code>def __init__(self, period: int,\n             input_values: List[float] = None,\n             input_indicator: Indicator = None,\n             input_modifier: InputModifierType = None,\n             ma_type: MAType = MAType.SMA,\n             input_sampling: SamplingPeriodType = None):\n    super().__init__(input_modifier=input_modifier,\n                     input_sampling=input_sampling)\n\n    self.period = period\n\n    self.ma = MAFactory.get_ma(ma_type, period)\n    self.add_sub_indicator(self.ma)\n\n    self.initialize(input_values, input_indicator)\n</code></pre>"},{"location":"reference/talipp/indicators/DonchianChannels/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> DonchianChannels","text":""},{"location":"reference/talipp/indicators/DonchianChannels/#talipp.indicators.DonchianChannels","title":"DonchianChannels","text":""},{"location":"reference/talipp/indicators/DonchianChannels/#talipp.indicators.DonchianChannels.DonchianChannels","title":"DonchianChannels","text":"<pre><code>DonchianChannels(\n    period: int,\n    input_values: List[OHLCV] = None,\n    input_indicator: Indicator = None,\n    input_modifier: InputModifierType = None,\n    input_sampling: SamplingPeriodType = None,\n)\n</code></pre> <p>               Bases: <code>Indicator</code></p> <p>Donchian Channels.</p> <p>Input type: OHLCV</p> <p>Output type: DonchianChannelsVal</p> <p>Parameters:</p> Name Type Description Default <code>period</code> <code>int</code> <p>Period.</p> required <code>input_values</code> <code>List[OHLCV]</code> <p>List of input values.</p> <code>None</code> <code>input_indicator</code> <code>Indicator</code> <p>Input indicator.</p> <code>None</code> <code>input_modifier</code> <code>InputModifierType</code> <p>Input modifier.</p> <code>None</code> <code>input_sampling</code> <code>SamplingPeriodType</code> <p>Input sampling type.</p> <code>None</code> Source code in <code>talipp/indicators/DonchianChannels.py</code> <pre><code>def __init__(self, period: int,\n             input_values: List[OHLCV] = None,\n             input_indicator: Indicator = None,\n             input_modifier: InputModifierType = None,\n             input_sampling: SamplingPeriodType = None):\n    super().__init__(input_modifier=input_modifier,\n                     output_value_type=DonchianChannelsVal,\n                     input_sampling=input_sampling)\n\n    self.period = period\n\n    self.initialize(input_values, input_indicator)\n</code></pre>"},{"location":"reference/talipp/indicators/DonchianChannels/#talipp.indicators.DonchianChannels.DonchianChannelsVal","title":"DonchianChannelsVal  <code>dataclass</code>","text":"<pre><code>DonchianChannelsVal(\n    lb: float = None, cb: float = None, ub: float = None\n)\n</code></pre> <p><code>DonchianChannels</code> output type.</p> <p>Parameters:</p> Name Type Description Default <code>lb</code> <code>float</code> <p>Lower band.</p> <code>None</code> <code>cb</code> <code>float</code> <p>Central band.</p> <code>None</code> <code>ub</code> <code>float</code> <p>Upper band.</p> <code>None</code>"},{"location":"reference/talipp/indicators/EMA/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> EMA","text":""},{"location":"reference/talipp/indicators/EMA/#talipp.indicators.EMA","title":"EMA","text":""},{"location":"reference/talipp/indicators/EMA/#talipp.indicators.EMA.EMA","title":"EMA","text":"<pre><code>EMA(\n    period: int,\n    input_values: List[float] = None,\n    input_indicator: Indicator = None,\n    input_modifier: InputModifierType = None,\n    input_sampling: SamplingPeriodType = None,\n)\n</code></pre> <p>               Bases: <code>Indicator</code></p> <p>Exponential Moving Average.</p> <p>Input type: <code>float</code></p> <p>Output type: <code>float</code></p> <p>Parameters:</p> Name Type Description Default <code>period</code> <code>int</code> <p>Period.</p> required <code>input_values</code> <code>List[float]</code> <p>List of input values.</p> <code>None</code> <code>input_indicator</code> <code>Indicator</code> <p>Input indicator.</p> <code>None</code> <code>input_modifier</code> <code>InputModifierType</code> <p>Input modifier.</p> <code>None</code> <code>input_sampling</code> <code>SamplingPeriodType</code> <p>Input sampling type.</p> <code>None</code> Source code in <code>talipp/indicators/EMA.py</code> <pre><code>def __init__(self, period: int,\n             input_values: List[float] = None,\n             input_indicator: Indicator = None,\n             input_modifier: InputModifierType = None,\n             input_sampling: SamplingPeriodType = None):\n    super().__init__(input_modifier=input_modifier,\n                     input_sampling=input_sampling)\n\n    self.period = period\n\n    self.initialize(input_values, input_indicator)\n</code></pre>"},{"location":"reference/talipp/indicators/EMV/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> EMV","text":""},{"location":"reference/talipp/indicators/EMV/#talipp.indicators.EMV","title":"EMV","text":""},{"location":"reference/talipp/indicators/EMV/#talipp.indicators.EMV.EMV","title":"EMV","text":"<pre><code>EMV(\n    period: int,\n    volume_div: int,\n    input_values: List[OHLCV] = None,\n    input_indicator: Indicator = None,\n    input_modifier: InputModifierType = None,\n    ma_type: MAType = MAType.SMA,\n    input_sampling: SamplingPeriodType = None,\n)\n</code></pre> <p>               Bases: <code>Indicator</code></p> <p>Ease of Movement.</p> <p>Input type: OHLCV</p> <p>Output type: <code>float</code></p> <p>Parameters:</p> Name Type Description Default <code>period</code> <code>int</code> <p>Period.</p> required <code>volume_div</code> <code>int</code> <p>Volume divider.</p> required <code>input_values</code> <code>List[OHLCV]</code> <p>List of input values.</p> <code>None</code> <code>input_indicator</code> <code>Indicator</code> <p>Input indicator.</p> <code>None</code> <code>input_modifier</code> <code>InputModifierType</code> <p>Input modifier.</p> <code>None</code> <code>input_sampling</code> <code>SamplingPeriodType</code> <p>Input sampling type.</p> <code>None</code> Source code in <code>talipp/indicators/EMV.py</code> <pre><code>def __init__(self, period: int,\n             volume_div: int,\n             input_values: List[OHLCV] = None,\n             input_indicator: Indicator = None,\n             input_modifier: InputModifierType = None,\n             ma_type: MAType = MAType.SMA,\n             input_sampling: SamplingPeriodType = None):\n    super().__init__(input_modifier=input_modifier,\n                     input_sampling=input_sampling)\n\n    self.period = period\n    self.volume_div = volume_div\n\n    self.emv_sma = MAFactory.get_ma(ma_type, period)\n    self.add_managed_sequence(self.emv_sma)\n\n    self.initialize(input_values, input_indicator)\n</code></pre>"},{"location":"reference/talipp/indicators/FibonacciRetracement/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> FibonacciRetracement","text":""},{"location":"reference/talipp/indicators/FibonacciRetracement/#talipp.indicators.FibonacciRetracement","title":"FibonacciRetracement","text":""},{"location":"reference/talipp/indicators/FibonacciRetracement/#talipp.indicators.FibonacciRetracement.FibonacciRetracement","title":"FibonacciRetracement","text":"<p>Fibonacci retracement levels</p>"},{"location":"reference/talipp/indicators/FibonacciRetracement/#talipp.indicators.FibonacciRetracement.FibonacciRetracement.R0_236","title":"R0_236  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>R0_236 = 0.236\n</code></pre> <p>23.6% level</p>"},{"location":"reference/talipp/indicators/FibonacciRetracement/#talipp.indicators.FibonacciRetracement.FibonacciRetracement.R0_382","title":"R0_382  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>R0_382 = 0.382\n</code></pre> <p>38.2% level</p>"},{"location":"reference/talipp/indicators/FibonacciRetracement/#talipp.indicators.FibonacciRetracement.FibonacciRetracement.R0_5","title":"R0_5  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>R0_5 = 0.5\n</code></pre> <p>50.0% level</p>"},{"location":"reference/talipp/indicators/FibonacciRetracement/#talipp.indicators.FibonacciRetracement.FibonacciRetracement.R0_618","title":"R0_618  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>R0_618 = 0.618\n</code></pre> <p>61.8% level</p>"},{"location":"reference/talipp/indicators/FibonacciRetracement/#talipp.indicators.FibonacciRetracement.FibonacciRetracement.R0_786","title":"R0_786  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>R0_786 = 0.786\n</code></pre> <p>78.6% level</p>"},{"location":"reference/talipp/indicators/FibonacciRetracement/#talipp.indicators.FibonacciRetracement.FibonacciRetracement.R1","title":"R1  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>R1 = 1.0\n</code></pre> <p>100.0% level</p>"},{"location":"reference/talipp/indicators/FibonacciRetracement/#talipp.indicators.FibonacciRetracement.FibonacciRetracement.R1_618","title":"R1_618  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>R1_618 = 1.618\n</code></pre> <p>161.8% level</p>"},{"location":"reference/talipp/indicators/FibonacciRetracement/#talipp.indicators.FibonacciRetracement.FibonacciRetracement.R2_618","title":"R2_618  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>R2_618 = 2.618\n</code></pre> <p>261.8% level</p>"},{"location":"reference/talipp/indicators/FibonacciRetracement/#talipp.indicators.FibonacciRetracement.FibonacciRetracement.R3_618","title":"R3_618  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>R3_618 = 3.618\n</code></pre> <p>361.8% level</p>"},{"location":"reference/talipp/indicators/FibonacciRetracement/#talipp.indicators.FibonacciRetracement.FibonacciRetracement.get_retracement_value","title":"get_retracement_value  <code>staticmethod</code>","text":"<pre><code>get_retracement_value(\n    fibonacci_coefficient: float, value: float\n) -&gt; float\n</code></pre> <p>Calculate output value based on the provided input value and Fibonacci coefficient.</p> <p>Parameters:</p> Name Type Description Default <code>fibonacci_coefficient</code> <code>float</code> <p>Fibonacci coefficient.</p> required <code>value</code> <code>float</code> <p>Input value.</p> required <p>Returns:</p> Type Description <code>float</code> <p>Value for given Fibonacci coefficient</p> Source code in <code>talipp/indicators/FibonacciRetracement.py</code> <pre><code>@staticmethod\ndef get_retracement_value(fibonacci_coefficient: float, value: float) -&gt; float:\n    \"\"\"Calculate output value based on the provided input value and Fibonacci coefficient.\n\n    Args:\n        fibonacci_coefficient: Fibonacci coefficient.\n        value: Input value.\n\n    Returns:\n        Value for given Fibonacci coefficient\n    \"\"\"\n    return value + value * fibonacci_coefficient\n</code></pre>"},{"location":"reference/talipp/indicators/ForceIndex/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> ForceIndex","text":""},{"location":"reference/talipp/indicators/ForceIndex/#talipp.indicators.ForceIndex","title":"ForceIndex","text":""},{"location":"reference/talipp/indicators/ForceIndex/#talipp.indicators.ForceIndex.ForceIndex","title":"ForceIndex","text":"<pre><code>ForceIndex(\n    period: int,\n    input_values: List[OHLCV] = None,\n    input_indicator: Indicator = None,\n    input_modifier: InputModifierType = None,\n    ma_type: MAType = MAType.EMA,\n    input_sampling: SamplingPeriodType = None,\n)\n</code></pre> <p>               Bases: <code>Indicator</code></p> <p>Force Index.</p> <p>Input type: OHLCV</p> <p>Output type: <code>float</code></p> <p>Parameters:</p> Name Type Description Default <code>period</code> <code>int</code> <p>Period.</p> required <code>input_values</code> <code>List[OHLCV]</code> <p>List of input values.</p> <code>None</code> <code>input_indicator</code> <code>Indicator</code> <p>Input indicator.</p> <code>None</code> <code>input_modifier</code> <code>InputModifierType</code> <p>Input modifier.</p> <code>None</code> <code>ma_type</code> <code>MAType</code> <p>Moving average type.</p> <code>EMA</code> <code>input_sampling</code> <code>SamplingPeriodType</code> <p>Input sampling type.</p> <code>None</code> Source code in <code>talipp/indicators/ForceIndex.py</code> <pre><code>def __init__(self, period: int,\n             input_values: List[OHLCV] = None,\n             input_indicator: Indicator = None,\n             input_modifier: InputModifierType = None,\n             ma_type: MAType = MAType.EMA,\n             input_sampling: SamplingPeriodType = None):\n    super().__init__(input_modifier=input_modifier,\n                     input_sampling=input_sampling)\n\n    self.ma = MAFactory.get_ma(ma_type, period)\n    self.add_managed_sequence(self.ma)\n\n    self.initialize(input_values, input_indicator)\n</code></pre>"},{"location":"reference/talipp/indicators/HMA/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> HMA","text":""},{"location":"reference/talipp/indicators/HMA/#talipp.indicators.HMA","title":"HMA","text":""},{"location":"reference/talipp/indicators/HMA/#talipp.indicators.HMA.HMA","title":"HMA","text":"<pre><code>HMA(\n    period: int,\n    input_values: List[float] = None,\n    input_indicator: Indicator = None,\n    input_modifier: InputModifierType = None,\n    input_sampling: SamplingPeriodType = None,\n)\n</code></pre> <p>               Bases: <code>Indicator</code></p> <p>Hull Moving Average.</p> <p>Input type: <code>float</code></p> <p>Output type: <code>float</code></p> <p>Parameters:</p> Name Type Description Default <code>period</code> <code>int</code> <p>Period.</p> required <code>input_values</code> <code>List[float]</code> <p>List of input values.</p> <code>None</code> <code>input_indicator</code> <code>Indicator</code> <p>Input indicator.</p> <code>None</code> <code>input_modifier</code> <code>InputModifierType</code> <p>Input modifier.</p> <code>None</code> <code>input_sampling</code> <code>SamplingPeriodType</code> <p>Input sampling type.</p> <code>None</code> Source code in <code>talipp/indicators/HMA.py</code> <pre><code>def __init__(self, period: int,\n             input_values: List[float] = None,\n             input_indicator: Indicator = None,\n             input_modifier: InputModifierType = None,\n             input_sampling: SamplingPeriodType = None):\n    super().__init__(input_modifier=input_modifier,\n                     input_sampling=input_sampling)\n\n    self.period = period\n\n    self.wma = WMA(period)\n    self.wma2 = WMA(int(period / 2))\n    self.hma = WMA(int(sqrt(period)))\n\n    self.add_sub_indicator(self.wma)\n    self.add_sub_indicator(self.wma2)\n    self.add_managed_sequence(self.hma)\n\n    self.initialize(input_values, input_indicator)\n</code></pre>"},{"location":"reference/talipp/indicators/IBS/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> IBS","text":""},{"location":"reference/talipp/indicators/IBS/#talipp.indicators.IBS","title":"IBS","text":""},{"location":"reference/talipp/indicators/IBS/#talipp.indicators.IBS.IBS","title":"IBS","text":"<pre><code>IBS(\n    input_values: List[OHLCV] = None,\n    input_indicator: Indicator = None,\n    input_modifier: InputModifierType = None,\n    input_sampling: SamplingPeriodType = None,\n)\n</code></pre> <p>               Bases: <code>Indicator</code></p> <p>Internal Bar Strength.</p> <p>Input type: OHLCV</p> <p>Output type: <code>float</code></p> <p>Parameters:</p> Name Type Description Default <code>input_values</code> <code>List[OHLCV]</code> <p>List of input values.</p> <code>None</code> <code>input_indicator</code> <code>Indicator</code> <p>Input indicator.</p> <code>None</code> <code>input_modifier</code> <code>InputModifierType</code> <p>Input modifier.</p> <code>None</code> <code>input_sampling</code> <code>SamplingPeriodType</code> <p>Input sampling type.</p> <code>None</code> Source code in <code>talipp/indicators/IBS.py</code> <pre><code>def __init__(self,\n             input_values: List[OHLCV] = None,\n             input_indicator: Indicator = None,\n             input_modifier: InputModifierType = None,\n             input_sampling: SamplingPeriodType = None):\n    super().__init__(input_modifier=input_modifier,\n                     input_sampling=input_sampling)\n\n    self.initialize(input_values, input_indicator)\n</code></pre>"},{"location":"reference/talipp/indicators/Ichimoku/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> Ichimoku","text":""},{"location":"reference/talipp/indicators/Ichimoku/#talipp.indicators.Ichimoku","title":"Ichimoku","text":""},{"location":"reference/talipp/indicators/Ichimoku/#talipp.indicators.Ichimoku.Ichimoku","title":"Ichimoku","text":"<pre><code>Ichimoku(\n    kijun_period: int,\n    tenkan_period: int,\n    chikou_lag_period: int,\n    senkou_slow_period: int,\n    senkou_lookup_period: int,\n    input_values: List[OHLCV] = None,\n    input_indicator: Indicator = None,\n    input_modifier: InputModifierType = None,\n    input_sampling: SamplingPeriodType = None,\n)\n</code></pre> <p>               Bases: <code>Indicator</code></p> <p>Ichimoku Cloud.</p> <p>Input type: OHLCV</p> <p>Output type: IchimokuVal</p> <p>Parameters:</p> Name Type Description Default <code>kijun_period</code> <code>int</code> <p>Kijun (base line) period.</p> required <code>tenkan_period</code> <code>int</code> <p>Tenkan (conversion line) period.</p> required <code>chikou_lag_period</code> <code>int</code> <p>Chikou (lagging line) period.</p> required <code>senkou_slow_period</code> <code>int</code> <p>Senkoun (leading) slow period.</p> required <code>senkou_lookup_period</code> <code>int</code> <p>Senkoun (leading) fast period.</p> required <code>input_values</code> <code>List[OHLCV]</code> <p>List of input values.</p> <code>None</code> <code>input_indicator</code> <code>Indicator</code> <p>Input indicator.</p> <code>None</code> <code>input_modifier</code> <code>InputModifierType</code> <p>Input modifier.</p> <code>None</code> <code>input_sampling</code> <code>SamplingPeriodType</code> <p>Input sampling type.</p> <code>None</code> Source code in <code>talipp/indicators/Ichimoku.py</code> <pre><code>def __init__(self,\n             kijun_period: int,\n             tenkan_period: int,\n             chikou_lag_period: int,\n             senkou_slow_period: int,\n             senkou_lookup_period: int,\n             input_values: List[OHLCV] = None,\n             input_indicator: Indicator = None,\n             input_modifier: InputModifierType = None,\n             input_sampling: SamplingPeriodType = None):\n    super().__init__(input_modifier=input_modifier,\n                     output_value_type=IchimokuVal,\n                     input_sampling=input_sampling)\n\n    self.kijun_period = kijun_period\n    self.tenkan_period = tenkan_period\n    self.chikou_lag_period = chikou_lag_period\n    self.senkou_slow_period = senkou_slow_period\n    self.senkou_lookup_period = senkou_lookup_period\n\n    self.base_line = []         # Kijun Sen\n    self.conversion_line = []   # Tenkan Sen\n    self.lagging_line = []      # Chikou Span\n    self.cloud_leading_fast_line = []   # Senkou Span\n    self.cloud_leading_slow_line = []   # Senkou Span\n\n    self.add_managed_sequence(self.base_line)\n    self.add_managed_sequence(self.conversion_line)\n    self.add_managed_sequence(self.lagging_line)\n    self.add_managed_sequence(self.cloud_leading_fast_line)\n    self.add_managed_sequence(self.cloud_leading_slow_line)\n\n    self.initialize(input_values, input_indicator)\n</code></pre>"},{"location":"reference/talipp/indicators/Ichimoku/#talipp.indicators.Ichimoku.IchimokuVal","title":"IchimokuVal  <code>dataclass</code>","text":"<pre><code>IchimokuVal(\n    base_line: float = None,\n    conversion_line: float = None,\n    lagging_line: float = None,\n    cloud_leading_fast_line: float = None,\n    cloud_leading_slow_line: float = None,\n)\n</code></pre> <p><code>Ichimoku</code> output type.</p> <p>Parameters:</p> Name Type Description Default <code>base_line</code> <code>float</code> <p>Kijun Sen.</p> <code>None</code> <code>conversion_line</code> <code>float</code> <p>Tenkan Sen.</p> <code>None</code> <code>lagging_line</code> <code>float</code> <p>Chikou Span.</p> <code>None</code> <code>cloud_leading_fast_line</code> <code>float</code> <p>Senkou Span.</p> <code>None</code> <code>cloud_leading_slow_line</code> <code>float</code> <p>Senkou Span.</p> <code>None</code>"},{"location":"reference/talipp/indicators/Indicator/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> Indicator","text":""},{"location":"reference/talipp/indicators/Indicator/#talipp.indicators.Indicator","title":"Indicator","text":""},{"location":"reference/talipp/indicators/Indicator/#talipp.indicators.Indicator.Indicator","title":"Indicator","text":"<pre><code>Indicator(\n    input_modifier: InputModifierType = None,\n    output_value_type: Type = float,\n    input_sampling: SamplingPeriodType = None,\n)\n</code></pre> <p>               Bases: <code>Sequence</code></p> <p>Base indicator class.</p> <p>Parameters:</p> Name Type Description Default <code>input_modifier</code> <code>InputModifierType</code> <p>Input modifier.</p> <code>None</code> <code>output_value_type</code> <code>Type</code> <p>Output value type.</p> <code>float</code> <code>input_sampling</code> <code>SamplingPeriodType</code> <p>Input sampling type.</p> <code>None</code> Source code in <code>talipp/indicators/Indicator.py</code> <pre><code>def __init__(self,\n             input_modifier: InputModifierType = None,\n             output_value_type: Type = float,\n             input_sampling: SamplingPeriodType = None):\n    self.input_modifier = input_modifier\n    self.output_value_type = output_value_type\n    self.input_sampler: Sampler = None\n    if input_sampling is not None:\n        self.input_sampler = Sampler(input_sampling)\n\n    self.input_values: ListAny = []\n    self.output_values: ListAny = []\n    self.managed_sequences: List[ManagedSequenceType] = []\n    self.sub_indicators: List[Indicator] = []\n    self.output_listeners: List[Indicator] = []\n</code></pre>"},{"location":"reference/talipp/indicators/Indicator/#talipp.indicators.Indicator.Indicator.add","title":"add","text":"<pre><code>add(value: Any) -&gt; None\n</code></pre> <p>Add a new input value.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>Value to be added.</p> required Source code in <code>talipp/indicators/Indicator.py</code> <pre><code>def add(self, value: Any) -&gt; None:\n    \"\"\"Add a new input value.\n\n    Args:\n        value: Value to be added.\n    \"\"\"\n\n    if (self.input_sampler is not None\n            and has_valid_values(self.input_values)\n            and self.input_sampler.is_same_period(value, self.input_values[-1])):\n        self.update(value)\n    else:\n        if not isinstance(value, list):\n            value = [value]\n\n        for input_value in value:\n            if input_value is not None and self.input_modifier is not None:\n                input_value = self.input_modifier(input_value)\n\n            for sub_indicator in self.sub_indicators:\n                sub_indicator.add(input_value)\n\n            self.input_values.append(input_value)\n\n            if input_value is not None:\n                new_output_value = self._calculate_new_value()\n            else:\n                new_output_value = None\n\n            if new_output_value is None and len(self.output_values) &gt; 0:\n                new_output_value = self.output_values[-1]\n\n            self._add_to_output_values(new_output_value)\n\n            for listener in self.output_listeners:\n                listener.add(new_output_value)\n</code></pre>"},{"location":"reference/talipp/indicators/Indicator/#talipp.indicators.Indicator.Indicator.add_input_value","title":"add_input_value","text":"<pre><code>add_input_value(value: Any) -&gt; None\n</code></pre> <p>Deprecated. Use add method instead.</p> <p>Add a new input value.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>Value to be added.</p> required Source code in <code>talipp/indicators/Indicator.py</code> <pre><code>def add_input_value(self, value: Any) -&gt; None:\n    \"\"\"**Deprecated.** Use [add][talipp.indicators.Indicator.Indicator.add] method instead.\n\n    Add a new input value.\n\n    Args:\n        value: Value to be added.\n    \"\"\"\n\n    warn('This method is deprecated and will be removed in the next major version. '\n         'Please use add(...) method with the same signature instead.',\n         DeprecationWarning,\n         stacklevel=2)\n    return self.add(value)\n</code></pre>"},{"location":"reference/talipp/indicators/Indicator/#talipp.indicators.Indicator.Indicator.purge_oldest","title":"purge_oldest","text":"<pre><code>purge_oldest(size: int) -&gt; None\n</code></pre> <p>Purge old input values.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>int</code> <p>number of oldest input values to be purged.</p> required Source code in <code>talipp/indicators/Indicator.py</code> <pre><code>def purge_oldest(self, size: int) -&gt; None:\n    \"\"\"Purge old input values.\n\n    Args:\n        size: number of oldest input values to be purged.\n    \"\"\"\n\n    for sub_indicator in self.sub_indicators:\n        sub_indicator.purge_oldest(size)\n\n    if len(self.input_values) &gt; 0:\n        self.input_values = self.input_values[size:]\n\n    self._purge_oldest_output_value(size)\n\n    for lst in self.managed_sequences:\n        if isinstance(lst, Indicator):\n            lst.purge_oldest(size)\n        else:\n            del lst[:size]\n\n    self._purge_oldest_custom(size)\n\n    for listener in self.output_listeners:\n        listener.purge_oldest(size)\n</code></pre>"},{"location":"reference/talipp/indicators/Indicator/#talipp.indicators.Indicator.Indicator.remove","title":"remove","text":"<pre><code>remove() -&gt; None\n</code></pre> <p>Remove the last input value.</p> Source code in <code>talipp/indicators/Indicator.py</code> <pre><code>def remove(self) -&gt; None:\n    \"\"\"Remove the last input value.\"\"\"\n\n    for sub_indicator in self.sub_indicators:\n        sub_indicator.remove()\n\n    if len(self.input_values) &gt; 0:\n        self.input_values.pop(-1)\n\n    self._remove_output_value()\n\n    for lst in self.managed_sequences:\n        if isinstance(lst, Indicator):\n            lst.remove()\n        else:\n            if len(lst) &gt; 0:\n                lst.pop(-1)\n\n    self._remove_custom()\n\n    for listener in self.output_listeners:\n        listener.remove()\n</code></pre>"},{"location":"reference/talipp/indicators/Indicator/#talipp.indicators.Indicator.Indicator.remove_all","title":"remove_all","text":"<pre><code>remove_all() -&gt; None\n</code></pre> <p>Remove all input values.</p> Source code in <code>talipp/indicators/Indicator.py</code> <pre><code>def remove_all(self) -&gt; None:\n    \"\"\"Remove all input values.\"\"\"\n\n    for sub_indicator in self.sub_indicators:\n        sub_indicator.remove_all()\n\n    self.input_values = []\n    self.output_values = []\n\n    for lst in self.managed_sequences:\n        if isinstance(lst, Indicator):\n            lst.remove_all()\n        else:\n            lst.clear()\n\n    self._remove_all_custom()\n\n    for listener in self.output_listeners:\n        listener.remove_all()\n</code></pre>"},{"location":"reference/talipp/indicators/Indicator/#talipp.indicators.Indicator.Indicator.remove_input_value","title":"remove_input_value","text":"<pre><code>remove_input_value() -&gt; None\n</code></pre> <p>Deprecated. Use remove method instead.</p> <p>Remove the last input value.</p> Source code in <code>talipp/indicators/Indicator.py</code> <pre><code>def remove_input_value(self) -&gt; None:\n    \"\"\"**Deprecated.** Use [remove][talipp.indicators.Indicator.Indicator.remove] method instead.\n\n    Remove the last input value.\n    \"\"\"\n\n    warn('This method is deprecated and will be removed in the next major version. '\n         'Please use remove(...) method with the same signature instead.',\n         DeprecationWarning,\n         stacklevel=2)\n    return self.remove()\n</code></pre>"},{"location":"reference/talipp/indicators/Indicator/#talipp.indicators.Indicator.Indicator.update","title":"update","text":"<pre><code>update(value: Any) -&gt; None\n</code></pre> <p>Update the last input value.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>Value to be used.</p> required Source code in <code>talipp/indicators/Indicator.py</code> <pre><code>def update(self, value: Any) -&gt; None:\n    \"\"\"Update the last input value.\n\n    Args:\n        value: Value to be used.\n    \"\"\"\n\n    self.remove()\n    self.add(value)\n</code></pre>"},{"location":"reference/talipp/indicators/Indicator/#talipp.indicators.Indicator.Indicator.update_input_value","title":"update_input_value","text":"<pre><code>update_input_value(value: Any) -&gt; None\n</code></pre> <p>Deprecated. Use update method instead.</p> <p>Update the last input value.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>Value to be used.</p> required Source code in <code>talipp/indicators/Indicator.py</code> <pre><code>def update_input_value(self, value: Any) -&gt; None:\n    \"\"\"**Deprecated.** Use [update][talipp.indicators.Indicator.Indicator.update] method instead.\n\n    Update the last input value.\n\n    Args:\n        value: Value to be used.\n    \"\"\"\n\n    warn('This method is deprecated and will be removed in the next major version. '\n         'Please use update(...) method with the same signature instead.',\n         DeprecationWarning,\n         stacklevel=2)\n    return self.update(value)\n</code></pre>"},{"location":"reference/talipp/indicators/KAMA/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> KAMA","text":""},{"location":"reference/talipp/indicators/KAMA/#talipp.indicators.KAMA","title":"KAMA","text":""},{"location":"reference/talipp/indicators/KAMA/#talipp.indicators.KAMA.KAMA","title":"KAMA","text":"<pre><code>KAMA(\n    period: int,\n    fast_ema_constant_period: int,\n    slow_ema_constant_period: int,\n    input_values: List[float] = None,\n    input_indicator: Indicator = None,\n    input_modifier: InputModifierType = None,\n    input_sampling: SamplingPeriodType = None,\n)\n</code></pre> <p>               Bases: <code>Indicator</code></p> <p>Kaufman's Adaptive Moving Average.</p> <p>Input type: <code>float</code></p> <p>Output type: <code>float</code></p> <p>Parameters:</p> Name Type Description Default <code>period</code> <code>int</code> <p>Volatility period.</p> required <code>fast_ema_constant_period</code> <code>int</code> <p>Fast EMA smoothing factor.</p> required <code>slow_ema_constant_period</code> <code>int</code> <p>Slow EMA smoothing factor.</p> required <code>input_values</code> <code>List[float]</code> <p>List of input values.</p> <code>None</code> <code>input_indicator</code> <code>Indicator</code> <p>Input indicator.</p> <code>None</code> <code>input_modifier</code> <code>InputModifierType</code> <p>Input modifier.</p> <code>None</code> <code>input_sampling</code> <code>SamplingPeriodType</code> <p>Input sampling type.</p> <code>None</code> Source code in <code>talipp/indicators/KAMA.py</code> <pre><code>def __init__(self, period: int,\n             fast_ema_constant_period: int,\n             slow_ema_constant_period: int,\n             input_values: List[float] = None,\n             input_indicator: Indicator = None,\n             input_modifier: InputModifierType = None,\n             input_sampling: SamplingPeriodType = None):\n    super().__init__(input_modifier=input_modifier,\n                     input_sampling=input_sampling)\n\n    self.period = period\n\n    self.fast_smoothing_constant = 2.0 / (fast_ema_constant_period + 1)\n    self.slow_smoothing_constant = 2.0 / (slow_ema_constant_period + 1)\n\n    self.volatility = []\n    self.add_managed_sequence(self.volatility)\n\n    self.initialize(input_values, input_indicator)\n</code></pre>"},{"location":"reference/talipp/indicators/KST/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> KST","text":""},{"location":"reference/talipp/indicators/KST/#talipp.indicators.KST","title":"KST","text":""},{"location":"reference/talipp/indicators/KST/#talipp.indicators.KST.KST","title":"KST","text":"<pre><code>KST(\n    roc1_period: int,\n    roc1_ma_period: int,\n    roc2_period: int,\n    roc2_ma_period: int,\n    roc3_period: int,\n    roc3_ma_period: int,\n    roc4_period: int,\n    roc4_ma_period: int,\n    signal_period: int,\n    input_values: List[float] = None,\n    input_indicator: Indicator = None,\n    input_modifier: InputModifierType = None,\n    ma_type: MAType = MAType.SMA,\n    input_sampling: SamplingPeriodType = None,\n)\n</code></pre> <p>               Bases: <code>Indicator</code></p> <p>Know Sure Thing.</p> <p>Input type: <code>float</code></p> <p>Output type: KSTVal</p> <p>Parameters:</p> Name Type Description Default <code>roc1_period</code> <code>int</code> <p>ROC period.</p> required <code>roc1_ma_period</code> <code>int</code> <p>ROC moving average period.</p> required <code>roc2_period</code> <code>int</code> <p>ROC period.</p> required <code>roc2_ma_period</code> <code>int</code> <p>ROC moving average period.</p> required <code>roc3_period</code> <code>int</code> <p>ROC period.</p> required <code>roc3_ma_period</code> <code>int</code> <p>ROC moving average period.</p> required <code>roc4_period</code> <code>int</code> <p>ROC period.</p> required <code>roc4_ma_period</code> <code>int</code> <p>ROC moving average period.</p> required <code>input_values</code> <code>List[float]</code> <p>List of input values.</p> <code>None</code> <code>input_indicator</code> <code>Indicator</code> <p>Input indicator.</p> <code>None</code> <code>input_modifier</code> <code>InputModifierType</code> <p>Input modifier.</p> <code>None</code> <code>ma_type</code> <code>MAType</code> <p>Moving average type.</p> <code>SMA</code> <code>input_sampling</code> <code>SamplingPeriodType</code> <p>Input sampling type.</p> <code>None</code> Source code in <code>talipp/indicators/KST.py</code> <pre><code>def __init__(self,\n             roc1_period: int,\n             roc1_ma_period: int,\n             roc2_period: int,\n             roc2_ma_period: int,\n             roc3_period: int,\n             roc3_ma_period: int,\n             roc4_period: int,\n             roc4_ma_period: int,\n             signal_period: int,\n             input_values: List[float] = None,\n             input_indicator: Indicator = None,\n             input_modifier: InputModifierType = None,\n             ma_type: MAType = MAType.SMA,\n             input_sampling: SamplingPeriodType = None):\n    super().__init__(input_modifier=input_modifier,\n                     output_value_type=KSTVal,\n                     input_sampling=input_sampling)\n\n    self.roc1 = ROC(roc1_period)\n    self.roc2 = ROC(roc2_period)\n    self.roc3 = ROC(roc3_period)\n    self.roc4 = ROC(roc4_period)\n\n    self.roc1_ma = MAFactory.get_ma(ma_type, roc1_ma_period, input_indicator=self.roc1)\n    self.roc2_ma = MAFactory.get_ma(ma_type, roc2_ma_period, input_indicator=self.roc2)\n    self.roc3_ma = MAFactory.get_ma(ma_type, roc3_ma_period, input_indicator=self.roc3)\n    self.roc4_ma = MAFactory.get_ma(ma_type, roc4_ma_period, input_indicator=self.roc4)\n    self.signal_line = MAFactory.get_ma(ma_type, signal_period)\n\n    self.add_sub_indicator(self.roc1)\n    self.add_sub_indicator(self.roc2)\n    self.add_sub_indicator(self.roc3)\n    self.add_sub_indicator(self.roc4)\n    self.add_managed_sequence(self.signal_line)\n\n    self.initialize(input_values, input_indicator)\n</code></pre>"},{"location":"reference/talipp/indicators/KST/#talipp.indicators.KST.KSTVal","title":"KSTVal  <code>dataclass</code>","text":"<pre><code>KSTVal(kst: float = None, signal: float = None)\n</code></pre> <p><code>KST</code> output type.</p> <p>Parameters:</p> Name Type Description Default <code>kst</code> <code>float</code> <p><code>KST</code> value.</p> <code>None</code> <code>signal</code> <code>float</code> <p>Signal line.</p> <code>None</code>"},{"location":"reference/talipp/indicators/KVO/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> KVO","text":""},{"location":"reference/talipp/indicators/KVO/#talipp.indicators.KVO","title":"KVO","text":""},{"location":"reference/talipp/indicators/KVO/#talipp.indicators.KVO.KVO","title":"KVO","text":"<pre><code>KVO(\n    fast_period: int,\n    slow_period: int,\n    input_values: List[OHLCV] = None,\n    input_indicator: Indicator = None,\n    input_modifier: InputModifierType = None,\n    ma_type: MAType = MAType.EMA,\n    input_sampling: SamplingPeriodType = None,\n)\n</code></pre> <p>               Bases: <code>Indicator</code></p> <p>Klinger Volume Oscillator.</p> <p>Input type: OHLCV</p> <p>Output type: <code>float</code></p> <p>Parameters:</p> Name Type Description Default <code>fast_period</code> <code>int</code> <p>Fast moving average period.</p> required <code>slow_period</code> <code>int</code> <p>Slow moving average period.</p> required <code>input_values</code> <code>List[OHLCV]</code> <p>List of input values.</p> <code>None</code> <code>input_indicator</code> <code>Indicator</code> <p>Input indicator.</p> <code>None</code> <code>input_modifier</code> <code>InputModifierType</code> <p>Input modifier.</p> <code>None</code> <code>ma_type</code> <code>MAType</code> <p>Moving average type.</p> <code>EMA</code> <code>input_sampling</code> <code>SamplingPeriodType</code> <p>Input sampling type.</p> <code>None</code> Source code in <code>talipp/indicators/KVO.py</code> <pre><code>def __init__(self, fast_period: int,\n             slow_period: int,\n             input_values: List[OHLCV] = None,\n             input_indicator: Indicator = None,\n             input_modifier: InputModifierType = None,\n             ma_type: MAType = MAType.EMA,\n             input_sampling: SamplingPeriodType = None):\n    super().__init__(input_modifier=input_modifier,\n                     input_sampling=input_sampling)\n\n    self.fast_ma = MAFactory.get_ma(ma_type, fast_period)\n    self.add_managed_sequence(self.fast_ma)\n\n    self.slow_ma = MAFactory.get_ma(ma_type, slow_period)\n    self.add_managed_sequence(self.slow_ma)\n\n    self.trend = []\n    self.add_managed_sequence(self.trend)\n\n    self.cumulative_measurement = []\n    self.add_managed_sequence(self.cumulative_measurement)\n\n    self.initialize(input_values, input_indicator)\n</code></pre>"},{"location":"reference/talipp/indicators/KeltnerChannels/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> KeltnerChannels","text":""},{"location":"reference/talipp/indicators/KeltnerChannels/#talipp.indicators.KeltnerChannels","title":"KeltnerChannels","text":""},{"location":"reference/talipp/indicators/KeltnerChannels/#talipp.indicators.KeltnerChannels.KeltnerChannels","title":"KeltnerChannels","text":"<pre><code>KeltnerChannels(\n    ma_period: int,\n    atr_period: int,\n    atr_mult_up: float,\n    atr_mult_down: float,\n    input_values: List[OHLCV] = None,\n    input_indicator: Indicator = None,\n    input_modifier: InputModifierType = None,\n    ma_type: MAType = MAType.EMA,\n    input_sampling: SamplingPeriodType = None,\n)\n</code></pre> <p>               Bases: <code>Indicator</code></p> <p>Keltner Channels.</p> <p>Input type: OHLCV</p> <p>Output type: KeltnerChannelsVal</p> <p>Parameters:</p> Name Type Description Default <code>ma_period</code> <code>int</code> <p>Moving average period.</p> required <code>atr_period</code> <code>int</code> <p>ATR period.</p> required <code>atr_mult_up</code> <code>float</code> <p>Upper band multiplier.</p> required <code>atr_mult_down</code> <code>float</code> <p>Lower band multiplier.</p> required <code>input_values</code> <code>List[OHLCV]</code> <p>List of input values.</p> <code>None</code> <code>input_indicator</code> <code>Indicator</code> <p>Input indicator.</p> <code>None</code> <code>input_modifier</code> <code>InputModifierType</code> <p>Input modifier.</p> <code>None</code> <code>ma_type</code> <code>MAType</code> <p>Moving average type.</p> <code>EMA</code> <code>input_sampling</code> <code>SamplingPeriodType</code> <p>Input sampling type.</p> <code>None</code> Source code in <code>talipp/indicators/KeltnerChannels.py</code> <pre><code>def __init__(self, ma_period: int,\n             atr_period: int,\n             atr_mult_up: float,\n             atr_mult_down: float,\n             input_values: List[OHLCV] = None,\n             input_indicator: Indicator = None,\n             input_modifier: InputModifierType = None,\n             ma_type: MAType = MAType.EMA,\n             input_sampling: SamplingPeriodType = None):\n    super().__init__(input_modifier=input_modifier,\n                     output_value_type=KeltnerChannelsVal,\n                     input_sampling=input_sampling)\n\n    self.atr_mult_up = atr_mult_up\n    self.atr_mult_down = atr_mult_down\n\n    self.atr = ATR(atr_period)\n    self.cb = MAFactory.get_ma(ma_type, ma_period, input_modifier=ValueExtractor.extract_close)\n\n    self.add_sub_indicator(self.cb)\n    self.add_sub_indicator(self.atr)\n\n    self.initialize(input_values, input_indicator)\n</code></pre>"},{"location":"reference/talipp/indicators/KeltnerChannels/#talipp.indicators.KeltnerChannels.KeltnerChannelsVal","title":"KeltnerChannelsVal  <code>dataclass</code>","text":"<pre><code>KeltnerChannelsVal(\n    lb: float = None, cb: float = None, ub: float = None\n)\n</code></pre> <p><code>KeltnerChannels</code> output type.</p> <p>Parameters:</p> Name Type Description Default <code>lb</code> <code>float</code> <p>Lower band.</p> <code>None</code> <code>cb</code> <code>float</code> <p>Central band.</p> <code>None</code> <code>ub</code> <code>float</code> <p>Upper band.</p> <code>None</code>"},{"location":"reference/talipp/indicators/MACD/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> MACD","text":""},{"location":"reference/talipp/indicators/MACD/#talipp.indicators.MACD","title":"MACD","text":""},{"location":"reference/talipp/indicators/MACD/#talipp.indicators.MACD.MACD","title":"MACD","text":"<pre><code>MACD(\n    fast_period: int,\n    slow_period: int,\n    signal_period: int,\n    input_values: List[float] = None,\n    input_indicator: Indicator = None,\n    input_modifier: InputModifierType = None,\n    ma_type: MAType = MAType.EMA,\n    input_sampling: SamplingPeriodType = None,\n)\n</code></pre> <p>               Bases: <code>Indicator</code></p> <p>Moving Average Convergence Divergence.</p> <p>Input type: <code>float</code></p> <p>Output type: MACDVal</p> <p>Parameters:</p> Name Type Description Default <code>fast_period</code> <code>int</code> <p>Fast moving average period.</p> required <code>slow_period</code> <code>int</code> <p>Slow moving average period.</p> required <code>signal_period</code> <code>int</code> <p>Signal line moving average period.</p> required <code>input_values</code> <code>List[float]</code> <p>List of input values.</p> <code>None</code> <code>input_indicator</code> <code>Indicator</code> <p>Input indicator.</p> <code>None</code> <code>input_modifier</code> <code>InputModifierType</code> <p>Input modifier.</p> <code>None</code> <code>ma_type</code> <code>MAType</code> <p>Moving average type.</p> <code>EMA</code> <code>input_sampling</code> <code>SamplingPeriodType</code> <p>Input sampling type.</p> <code>None</code> Source code in <code>talipp/indicators/MACD.py</code> <pre><code>def __init__(self, fast_period: int,\n             slow_period: int,\n             signal_period: int,\n             input_values: List[float] = None,\n             input_indicator: Indicator = None,\n             input_modifier: InputModifierType = None,\n             ma_type: MAType = MAType.EMA,\n             input_sampling: SamplingPeriodType = None):\n    super().__init__(input_modifier=input_modifier,\n                     output_value_type=MACDVal,\n                     input_sampling=input_sampling)\n\n    self.ma_fast = MAFactory.get_ma(ma_type, fast_period)\n    self.ma_slow = MAFactory.get_ma(ma_type, slow_period)\n    self.signal_line = MAFactory.get_ma(ma_type, signal_period)\n\n    self.add_sub_indicator(self.ma_fast)\n    self.add_sub_indicator(self.ma_slow)\n    self.add_managed_sequence(self.signal_line)\n\n    self.initialize(input_values, input_indicator)\n</code></pre>"},{"location":"reference/talipp/indicators/MACD/#talipp.indicators.MACD.MACDVal","title":"MACDVal  <code>dataclass</code>","text":"<pre><code>MACDVal(\n    macd: float = None,\n    signal: float = None,\n    histogram: float = None,\n)\n</code></pre> <p><code>MACD</code> output type.</p> <p>Parameters:</p> Name Type Description Default <code>macd</code> <code>float</code> <p><code>MACD</code> value.</p> <code>None</code> <code>signal</code> <code>float</code> <p>Signal line.</p> <code>None</code> <code>histogram</code> <code>float</code> <p>Histogram.</p> <code>None</code>"},{"location":"reference/talipp/indicators/MassIndex/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> MassIndex","text":""},{"location":"reference/talipp/indicators/MassIndex/#talipp.indicators.MassIndex","title":"MassIndex","text":""},{"location":"reference/talipp/indicators/MassIndex/#talipp.indicators.MassIndex.MassIndex","title":"MassIndex","text":"<pre><code>MassIndex(\n    ma_period: int,\n    ma_ma_period: int,\n    ma_ratio_period: int,\n    input_values: List[OHLCV] = None,\n    input_indicator: Indicator = None,\n    input_modifier: InputModifierType = None,\n    ma_type: MAType = MAType.EMA,\n    input_sampling: SamplingPeriodType = None,\n)\n</code></pre> <p>               Bases: <code>Indicator</code></p> <p>Mass Index.</p> <p>Input type: OHLCV</p> <p>Output type: <code>float</code></p> <p>Parameters:</p> Name Type Description Default <code>ma_period</code> <code>int</code> <p>Moving average period.</p> required <code>ma_ma_period</code> <code>int</code> <p>Moving average period of moving average.</p> required <code>ma_ratio_period</code> <code>int</code> <p>Moving averages ration period.</p> required <code>input_values</code> <code>List[OHLCV]</code> <p>List of input values.</p> <code>None</code> <code>input_indicator</code> <code>Indicator</code> <p>Input indicator.</p> <code>None</code> <code>input_modifier</code> <code>InputModifierType</code> <p>Input modifier.</p> <code>None</code> <code>ma_type</code> <code>MAType</code> <p>Moving average type.</p> <code>EMA</code> <code>input_sampling</code> <code>SamplingPeriodType</code> <p>Input sampling type.</p> <code>None</code> Source code in <code>talipp/indicators/MassIndex.py</code> <pre><code>def __init__(self, ma_period: int,\n             ma_ma_period: int,\n             ma_ratio_period: int,\n             input_values: List[OHLCV] = None,\n             input_indicator: Indicator = None,\n             input_modifier: InputModifierType = None,\n             ma_type: MAType = MAType.EMA,\n             input_sampling: SamplingPeriodType = None):\n    super().__init__(input_modifier=input_modifier,\n                     input_sampling=input_sampling)\n\n    self.ma_ratio_period = ma_ratio_period\n\n    self.ma = MAFactory.get_ma(ma_type, ma_period)\n    self.ma_ma = MAFactory.get_ma(ma_type, ma_ma_period)\n    self.ma_ratio = []\n\n    self.add_managed_sequence(self.ma)\n    self.add_managed_sequence(self.ma_ma)\n    self.add_managed_sequence(self.ma_ratio)\n\n    self.initialize(input_values, input_indicator)\n</code></pre>"},{"location":"reference/talipp/indicators/McGinleyDynamic/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> McGinleyDynamic","text":""},{"location":"reference/talipp/indicators/McGinleyDynamic/#talipp.indicators.McGinleyDynamic","title":"McGinleyDynamic","text":""},{"location":"reference/talipp/indicators/McGinleyDynamic/#talipp.indicators.McGinleyDynamic.McGinleyDynamic","title":"McGinleyDynamic","text":"<pre><code>McGinleyDynamic(\n    period: int,\n    input_values: List[float] = None,\n    input_indicator: Indicator = None,\n    input_modifier: InputModifierType = None,\n    input_sampling: SamplingPeriodType = None,\n)\n</code></pre> <p>               Bases: <code>Indicator</code></p> <p>McGinley Dynamic.</p> <p>Input type: <code>float</code></p> <p>Output type: <code>float</code></p> <p>Parameters:</p> Name Type Description Default <code>period</code> <code>int</code> <p>Period.</p> required <code>input_values</code> <code>List[float]</code> <p>List of input values.</p> <code>None</code> <code>input_indicator</code> <code>Indicator</code> <p>Input indicator.</p> <code>None</code> <code>input_modifier</code> <code>InputModifierType</code> <p>Input modifier.</p> <code>None</code> <code>input_sampling</code> <code>SamplingPeriodType</code> <p>Input sampling type.</p> <code>None</code> Source code in <code>talipp/indicators/McGinleyDynamic.py</code> <pre><code>def __init__(self, period: int,\n             input_values: List[float] = None,\n             input_indicator: Indicator = None,\n             input_modifier: InputModifierType = None,\n             input_sampling: SamplingPeriodType = None):\n    super().__init__(input_modifier=input_modifier,\n                     input_sampling=input_sampling)\n\n    self.period = period\n\n    self.initialize(input_values, input_indicator)\n</code></pre>"},{"location":"reference/talipp/indicators/MeanDev/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> MeanDev","text":""},{"location":"reference/talipp/indicators/MeanDev/#talipp.indicators.MeanDev","title":"MeanDev","text":""},{"location":"reference/talipp/indicators/MeanDev/#talipp.indicators.MeanDev.MeanDev","title":"MeanDev","text":"<pre><code>MeanDev(\n    period: int,\n    input_values: List[float] = None,\n    input_indicator: Indicator = None,\n    input_modifier: InputModifierType = None,\n    ma_type: MAType = MAType.SMA,\n    input_sampling: SamplingPeriodType = None,\n)\n</code></pre> <p>               Bases: <code>Indicator</code></p> <p>Mean Deviation.</p> <p>Input type: <code>float</code></p> <p>Output type: <code>float</code></p> <p>Parameters:</p> Name Type Description Default <code>period</code> <code>int</code> <p>Moving average period.</p> required <code>input_values</code> <code>List[float]</code> <p>List of input values.</p> <code>None</code> <code>input_indicator</code> <code>Indicator</code> <p>Input indicator.</p> <code>None</code> <code>input_modifier</code> <code>InputModifierType</code> <p>Input modifier.</p> <code>None</code> <code>ma_type</code> <code>MAType</code> <p>Moving average type.</p> <code>SMA</code> <code>input_sampling</code> <code>SamplingPeriodType</code> <p>Input sampling type.</p> <code>None</code> Source code in <code>talipp/indicators/MeanDev.py</code> <pre><code>def __init__(self, period: int,\n             input_values: List[float] = None,\n             input_indicator: Indicator = None,\n             input_modifier: InputModifierType = None,\n             ma_type: MAType = MAType.SMA,\n             input_sampling: SamplingPeriodType = None):\n    super().__init__(input_modifier=input_modifier,\n                     input_sampling=input_sampling)\n\n    self.period = period\n\n    self.ma = MAFactory.get_ma(ma_type, period)\n    self.add_sub_indicator(self.ma)\n\n    self.initialize(input_values, input_indicator)\n</code></pre>"},{"location":"reference/talipp/indicators/OBV/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> OBV","text":""},{"location":"reference/talipp/indicators/OBV/#talipp.indicators.OBV","title":"OBV","text":""},{"location":"reference/talipp/indicators/OBV/#talipp.indicators.OBV.OBV","title":"OBV","text":"<pre><code>OBV(\n    input_values: List[OHLCV] = None,\n    input_indicator: Indicator = None,\n    input_modifier: InputModifierType = None,\n    input_sampling: SamplingPeriodType = None,\n)\n</code></pre> <p>               Bases: <code>Indicator</code></p> <p>On Balance Volume.</p> <p>Input type: OHLCV</p> <p>Output type: <code>float</code></p> <p>Parameters:</p> Name Type Description Default <code>input_values</code> <code>List[OHLCV]</code> <p>List of input values.</p> <code>None</code> <code>input_indicator</code> <code>Indicator</code> <p>Input indicator.</p> <code>None</code> <code>input_modifier</code> <code>InputModifierType</code> <p>Input modifier.</p> <code>None</code> <code>input_sampling</code> <code>SamplingPeriodType</code> <p>Input sampling type.</p> <code>None</code> Source code in <code>talipp/indicators/OBV.py</code> <pre><code>def __init__(self, input_values: List[OHLCV] = None,\n             input_indicator: Indicator = None,\n             input_modifier: InputModifierType = None,\n             input_sampling: SamplingPeriodType = None):\n    super().__init__(input_modifier=input_modifier,\n                     input_sampling=input_sampling)\n\n    self.initialize(input_values, input_indicator)\n</code></pre>"},{"location":"reference/talipp/indicators/ParabolicSAR/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> ParabolicSAR","text":""},{"location":"reference/talipp/indicators/ParabolicSAR/#talipp.indicators.ParabolicSAR","title":"ParabolicSAR","text":""},{"location":"reference/talipp/indicators/ParabolicSAR/#talipp.indicators.ParabolicSAR.ParabolicSAR","title":"ParabolicSAR","text":"<pre><code>ParabolicSAR(\n    init_accel_factor: float,\n    accel_factor_inc: float,\n    max_accel_factor: float,\n    input_values: List[OHLCV] = None,\n    input_indicator: Indicator = None,\n    input_modifier: InputModifierType = None,\n    input_sampling: SamplingPeriodType = None,\n)\n</code></pre> <p>               Bases: <code>Indicator</code></p> <p>Parabolic Stop And Reverse.</p> <p>Input type: OHLCV</p> <p>Output type: ParabolicSARVal</p> <p>Parameters:</p> Name Type Description Default <code>init_accel_factor</code> <code>float</code> <p>Initial acceleration factor.</p> required <code>accel_factor_inc</code> <code>float</code> <p>Acceleration factor increment.</p> required <code>max_accel_factor</code> <code>float</code> <p>Maximum acceleration factor.</p> required <code>input_values</code> <code>List[OHLCV]</code> <p>List of input values.</p> <code>None</code> <code>input_indicator</code> <code>Indicator</code> <p>Input indicator.</p> <code>None</code> <code>input_modifier</code> <code>InputModifierType</code> <p>Input modifier.</p> <code>None</code> <code>input_sampling</code> <code>SamplingPeriodType</code> <p>Input sampling type.</p> <code>None</code> Source code in <code>talipp/indicators/ParabolicSAR.py</code> <pre><code>def __init__(self, init_accel_factor: float,\n             accel_factor_inc: float,\n             max_accel_factor: float,\n             input_values: List[OHLCV] = None,\n             input_indicator: Indicator = None,\n             input_modifier: InputModifierType = None,\n             input_sampling: SamplingPeriodType = None):\n    super().__init__(input_modifier=input_modifier,\n                     output_value_type=ParabolicSARVal,\n                     input_sampling=input_sampling)\n\n    self.init_accel_factor = init_accel_factor\n    self.accel_factor_inc = accel_factor_inc\n    self.max_accel_factor = max_accel_factor\n\n    self.initialize(input_values, input_indicator)\n</code></pre>"},{"location":"reference/talipp/indicators/ParabolicSAR/#talipp.indicators.ParabolicSAR.ParabolicSARVal","title":"ParabolicSARVal  <code>dataclass</code>","text":"<pre><code>ParabolicSARVal(\n    value: float = None,\n    trend: SARTrend = None,\n    ep: float = None,\n    accel_factor: float = None,\n)\n</code></pre> <p><code>ParabolicSAR</code> output type.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>float</code> <p><code>SAR</code> value.</p> <code>None</code> <code>trend</code> <code>SARTrend</code> <p>Actual trend.</p> <code>None</code> <code>ep</code> <code>float</code> <p>Extreme point.</p> <code>None</code> <code>accel_factor</code> <code>float</code> <p>Acceleration factor.</p> <code>None</code>"},{"location":"reference/talipp/indicators/ParabolicSAR/#talipp.indicators.ParabolicSAR.SARTrend","title":"SARTrend","text":"<p>               Bases: <code>Enum</code></p> <p><code>ParabolicSAR</code> trend.</p>"},{"location":"reference/talipp/indicators/ParabolicSAR/#talipp.indicators.ParabolicSAR.SARTrend.DOWN","title":"DOWN  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DOWN = auto()\n</code></pre> <p>Down trend.</p>"},{"location":"reference/talipp/indicators/ParabolicSAR/#talipp.indicators.ParabolicSAR.SARTrend.UP","title":"UP  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>UP = auto()\n</code></pre> <p>Up trend.</p>"},{"location":"reference/talipp/indicators/PivotsHL/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> PivotsHL","text":""},{"location":"reference/talipp/indicators/PivotsHL/#talipp.indicators.PivotsHL","title":"PivotsHL","text":"Warning <p>The indicator is deprecated in favour of ZigZag indicator.</p>"},{"location":"reference/talipp/indicators/PivotsHL/#talipp.indicators.PivotsHL.PivotType","title":"PivotType","text":"<p>               Bases: <code>Enum</code></p> <p>Pivot type.</p>"},{"location":"reference/talipp/indicators/PivotsHL/#talipp.indicators.PivotsHL.PivotType.HIGH","title":"HIGH  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>HIGH = auto()\n</code></pre> <p>High pivot.</p>"},{"location":"reference/talipp/indicators/PivotsHL/#talipp.indicators.PivotsHL.PivotType.LOW","title":"LOW  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LOW = auto()\n</code></pre> <p>Low pivot.</p>"},{"location":"reference/talipp/indicators/PivotsHL/#talipp.indicators.PivotsHL.PivotsHL","title":"PivotsHL","text":"<pre><code>PivotsHL(\n    high_period: int,\n    low_period: int,\n    input_values: List[OHLCV] = None,\n    input_indicator: Indicator = None,\n    input_modifier: InputModifierType = None,\n    input_sampling: SamplingPeriodType = None,\n)\n</code></pre> <p>               Bases: <code>Indicator</code></p> <p>High/Low Pivots.</p> <p>Deprecated.</p> Warning <p>Due to its nature the indicator does not support <code>update</code> and <code>remove</code> operations.</p> <p>Input type: OHLCV</p> <p>Output type: PivotsHLVal</p> Important <p>Outputs of the indicator contain only pivots, i.e. length of the output does not match length of the input.</p> <p>Parameters:</p> Name Type Description Default <code>high_period</code> <code>int</code> <p>High pivot lookup period.</p> required <code>low_period</code> <code>int</code> <p>Low pivot lookup period.</p> required <code>input_values</code> <code>List[OHLCV]</code> <p>List of input values.</p> <code>None</code> <code>input_indicator</code> <code>Indicator</code> <p>Input indicator.</p> <code>None</code> <code>input_modifier</code> <code>InputModifierType</code> <p>Input modifier.</p> <code>None</code> <code>input_sampling</code> <code>SamplingPeriodType</code> <p>Input sampling type.</p> <code>None</code> Source code in <code>talipp/indicators/PivotsHL.py</code> <pre><code>def __init__(self, high_period: int,\n             low_period: int,\n             input_values: List[OHLCV] = None,\n             input_indicator: Indicator = None,\n             input_modifier: InputModifierType = None,\n             input_sampling: SamplingPeriodType = None):\n    super().__init__(input_modifier=input_modifier,\n                     output_value_type=PivotsHLVal,\n                     input_sampling=input_sampling)\n\n    self.high_period = high_period\n    self.low_period = low_period\n\n    self.initialize(input_values, input_indicator)\n</code></pre>"},{"location":"reference/talipp/indicators/PivotsHL/#talipp.indicators.PivotsHL.PivotsHLVal","title":"PivotsHLVal  <code>dataclass</code>","text":"<pre><code>PivotsHLVal(ohlcv: OHLCV = None, type: PivotType = None)\n</code></pre> <p><code>PivotsHL</code> output type.</p> <p>Parameters:</p> Name Type Description Default <code>ohlcv</code> <code>OHLCV</code> <p>Pivot.</p> <code>None</code> <code>type</code> <code>PivotType</code> <p>Pivot type.</p> <code>None</code>"},{"location":"reference/talipp/indicators/ROC/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> ROC","text":""},{"location":"reference/talipp/indicators/ROC/#talipp.indicators.ROC","title":"ROC","text":""},{"location":"reference/talipp/indicators/ROC/#talipp.indicators.ROC.ROC","title":"ROC","text":"<pre><code>ROC(\n    period: int,\n    input_values: List[float] = None,\n    input_indicator: Indicator = None,\n    input_modifier: InputModifierType = None,\n    input_sampling: SamplingPeriodType = None,\n)\n</code></pre> <p>               Bases: <code>Indicator</code></p> <p>Rate Of Change.</p> <p>Input type: <code>float</code></p> <p>Output type: <code>float</code></p> <p>Parameters:</p> Name Type Description Default <code>period</code> <code>int</code> <p>Look-back period.</p> required <code>input_values</code> <code>List[float]</code> <p>List of input values.</p> <code>None</code> <code>input_indicator</code> <code>Indicator</code> <p>Input indicator.</p> <code>None</code> <code>input_modifier</code> <code>InputModifierType</code> <p>Input modifier.</p> <code>None</code> <code>input_sampling</code> <code>SamplingPeriodType</code> <p>Input sampling type.</p> <code>None</code> Source code in <code>talipp/indicators/ROC.py</code> <pre><code>def __init__(self, period: int,\n             input_values: List[float] = None,\n             input_indicator: Indicator = None,\n             input_modifier: InputModifierType = None,\n             input_sampling: SamplingPeriodType = None):\n    super().__init__(input_modifier=input_modifier,\n                     input_sampling=input_sampling)\n\n    self.period = period\n\n    self.initialize(input_values, input_indicator)\n</code></pre>"},{"location":"reference/talipp/indicators/RSI/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> RSI","text":""},{"location":"reference/talipp/indicators/RSI/#talipp.indicators.RSI","title":"RSI","text":""},{"location":"reference/talipp/indicators/RSI/#talipp.indicators.RSI.RSI","title":"RSI","text":"<pre><code>RSI(\n    period: int,\n    input_values: List[float] = None,\n    input_indicator: Indicator = None,\n    input_modifier: InputModifierType = None,\n    input_sampling: SamplingPeriodType = None,\n)\n</code></pre> <p>               Bases: <code>Indicator</code></p> <p>Relative Strength Index.</p> <p>Input type: <code>float</code></p> <p>Output type: <code>float</code></p> <p>Parameters:</p> Name Type Description Default <code>period</code> <code>int</code> <p>Period.</p> required <code>input_values</code> <code>List[float]</code> <p>List of input values.</p> <code>None</code> <code>input_indicator</code> <code>Indicator</code> <p>Input indicator.</p> <code>None</code> <code>input_modifier</code> <code>InputModifierType</code> <p>Input modifier.</p> <code>None</code> <code>input_sampling</code> <code>SamplingPeriodType</code> <p>Input sampling type.</p> <code>None</code> Source code in <code>talipp/indicators/RSI.py</code> <pre><code>def __init__(self, period: int,\n             input_values: List[float] = None,\n             input_indicator: Indicator = None,\n             input_modifier: InputModifierType = None,\n             input_sampling: SamplingPeriodType = None):\n    super().__init__(input_modifier=input_modifier,\n                     input_sampling=input_sampling)\n\n    self.period = period\n\n    self.avg_gain = []\n    self.avg_loss = []\n\n    self.add_managed_sequence(self.avg_gain)\n    self.add_managed_sequence(self.avg_loss)\n\n    self.initialize(input_values, input_indicator)\n</code></pre>"},{"location":"reference/talipp/indicators/RogersSatchell/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> RogersSatchell","text":""},{"location":"reference/talipp/indicators/RogersSatchell/#talipp.indicators.RogersSatchell","title":"RogersSatchell","text":""},{"location":"reference/talipp/indicators/RogersSatchell/#talipp.indicators.RogersSatchell.RogersSatchell","title":"RogersSatchell","text":"<pre><code>RogersSatchell(\n    period: int,\n    input_values: List[OHLCV] = None,\n    input_indicator: Indicator = None,\n    input_modifier: InputModifierType = None,\n    input_sampling: SamplingPeriodType = None,\n)\n</code></pre> <p>               Bases: <code>Indicator</code></p> <p>Rogers-Satchell volatility indicator.</p> <p>Input type: OHLCV</p> <p>Output type: <code>float</code></p> <p>Parameters:</p> Name Type Description Default <code>period</code> <code>int</code> <p>Period.</p> required <code>input_values</code> <code>List[OHLCV]</code> <p>List of input values.</p> <code>None</code> <code>input_indicator</code> <code>Indicator</code> <p>Input indicator.</p> <code>None</code> <code>input_modifier</code> <code>InputModifierType</code> <p>Input modifier.</p> <code>None</code> <code>input_sampling</code> <code>SamplingPeriodType</code> <p>Input sampling type.</p> <code>None</code> Source code in <code>talipp/indicators/RogersSatchell.py</code> <pre><code>def __init__(self, period: int,\n             input_values: List[OHLCV] = None,\n             input_indicator: Indicator = None,\n             input_modifier: InputModifierType = None,\n             input_sampling: SamplingPeriodType = None):\n    super().__init__(input_modifier=input_modifier,\n                     input_sampling=input_sampling)\n\n    self.period = period\n\n    self.initialize(input_values, input_indicator)\n</code></pre>"},{"location":"reference/talipp/indicators/SFX/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> SFX","text":""},{"location":"reference/talipp/indicators/SFX/#talipp.indicators.SFX","title":"SFX","text":""},{"location":"reference/talipp/indicators/SFX/#talipp.indicators.SFX.SFX","title":"SFX","text":"<pre><code>SFX(\n    atr_period: int,\n    std_dev_period: int,\n    std_dev_smoothing_period: int,\n    input_values: List[OHLCV] = None,\n    input_indicator: Indicator = None,\n    input_modifier: InputModifierType = None,\n    ma_type: MAType = MAType.SMA,\n    input_sampling: SamplingPeriodType = None,\n)\n</code></pre> <p>               Bases: <code>Indicator</code></p> <p>SFX.</p> <p>Input type: OHLCV</p> <p>Output type: SFXVal</p> <p>Parameters:</p> Name Type Description Default <code>atr_period</code> <code>int</code> <p>ATR period.</p> required <code>std_dev_period</code> <code>int</code> <p>Standard deviation period.</p> required <code>std_dev_period</code> <code>int</code> <p>Standard deviation moving average period.</p> required <code>input_values</code> <code>List[OHLCV]</code> <p>List of input values.</p> <code>None</code> <code>input_indicator</code> <code>Indicator</code> <p>Input indicator.</p> <code>None</code> <code>input_modifier</code> <code>InputModifierType</code> <p>Input modifier.</p> <code>None</code> <code>ma_type</code> <code>MAType</code> <p>Moving average type.</p> <code>SMA</code> <code>input_sampling</code> <code>SamplingPeriodType</code> <p>Input sampling type.</p> <code>None</code> Source code in <code>talipp/indicators/SFX.py</code> <pre><code>def __init__(self, atr_period: int,\n             std_dev_period: int,\n             std_dev_smoothing_period: int,\n             input_values: List[OHLCV] = None,\n             input_indicator: Indicator = None,\n             input_modifier: InputModifierType = None,\n             ma_type: MAType = MAType.SMA,\n             input_sampling: SamplingPeriodType = None):\n    super().__init__(input_modifier=input_modifier,\n                     output_value_type=SFXVal,\n                     input_sampling=input_sampling)\n\n    self.atr = ATR(atr_period)\n    self.std_dev = StdDev(std_dev_period, input_modifier=ValueExtractor.extract_close)\n    self.ma_std_dev = MAFactory.get_ma(ma_type, std_dev_smoothing_period, input_indicator=self.std_dev)\n\n    self.add_sub_indicator(self.atr)\n    self.add_sub_indicator(self.std_dev)\n\n    self.initialize(input_values, input_indicator)\n</code></pre>"},{"location":"reference/talipp/indicators/SFX/#talipp.indicators.SFX.SFXVal","title":"SFXVal  <code>dataclass</code>","text":"<pre><code>SFXVal(\n    atr: float = None,\n    std_dev: float = None,\n    ma_std_dev: float = None,\n)\n</code></pre> <p><code>SFX</code> output type.</p> <p>Parameters:</p> Name Type Description Default <code>atr</code> <code>float</code> <p><code>ATR</code> value.</p> <code>None</code> <code>std_dev</code> <code>float</code> <p>Standard deviation.</p> <code>None</code> <code>ma_std_dev</code> <code>float</code> <p>Standard deviation moving average.</p> <code>None</code>"},{"location":"reference/talipp/indicators/SMA/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> SMA","text":""},{"location":"reference/talipp/indicators/SMA/#talipp.indicators.SMA","title":"SMA","text":""},{"location":"reference/talipp/indicators/SMA/#talipp.indicators.SMA.SMA","title":"SMA","text":"<pre><code>SMA(\n    period: int,\n    input_values: List[float] = None,\n    input_indicator: Indicator = None,\n    input_modifier: InputModifierType = None,\n    input_sampling: SamplingPeriodType = None,\n)\n</code></pre> <p>               Bases: <code>Indicator</code></p> <p>Simple Moving Average.</p> <p>Input type: <code>float</code></p> <p>Output type: <code>float</code></p> <p>Parameters:</p> Name Type Description Default <code>period</code> <code>int</code> <p>Period.</p> required <code>input_values</code> <code>List[float]</code> <p>List of input values.</p> <code>None</code> <code>input_indicator</code> <code>Indicator</code> <p>Input indicator.</p> <code>None</code> <code>input_modifier</code> <code>InputModifierType</code> <p>Input modifier.</p> <code>None</code> <code>input_sampling</code> <code>SamplingPeriodType</code> <p>Input sampling type.</p> <code>None</code> Source code in <code>talipp/indicators/SMA.py</code> <pre><code>def __init__(self, period: int,\n             input_values: List[float] = None,\n             input_indicator: Indicator = None,\n             input_modifier: InputModifierType = None,\n             input_sampling: SamplingPeriodType = None):\n    super().__init__(input_modifier=input_modifier,\n                     input_sampling=input_sampling)\n\n    self.period = period\n\n    self.initialize(input_values, input_indicator)\n</code></pre>"},{"location":"reference/talipp/indicators/SMMA/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> SMMA","text":""},{"location":"reference/talipp/indicators/SMMA/#talipp.indicators.SMMA","title":"SMMA","text":""},{"location":"reference/talipp/indicators/SMMA/#talipp.indicators.SMMA.SMMA","title":"SMMA","text":"<pre><code>SMMA(\n    period: int,\n    input_values: List[float] = None,\n    input_indicator: Indicator = None,\n    input_modifier: InputModifierType = None,\n    input_sampling: SamplingPeriodType = None,\n)\n</code></pre> <p>               Bases: <code>Indicator</code></p> <p>Smoothed Moving Average</p> <p>Input type: <code>float</code></p> <p>Output type: <code>float</code></p> <p>Parameters:</p> Name Type Description Default <code>period</code> <code>int</code> <p>Period.</p> required <code>input_values</code> <code>List[float]</code> <p>List of input values.</p> <code>None</code> <code>input_indicator</code> <code>Indicator</code> <p>Input indicator.</p> <code>None</code> <code>input_modifier</code> <code>InputModifierType</code> <p>Input modifier.</p> <code>None</code> <code>input_sampling</code> <code>SamplingPeriodType</code> <p>Input sampling type.</p> <code>None</code> Source code in <code>talipp/indicators/SMMA.py</code> <pre><code>def __init__(self, period: int,\n             input_values: List[float] = None,\n             input_indicator: Indicator = None,\n             input_modifier: InputModifierType = None,\n             input_sampling: SamplingPeriodType = None):\n    super().__init__(input_modifier=input_modifier,\n                     input_sampling=input_sampling)\n\n    self.period = period\n\n    self.initialize(input_values, input_indicator)\n</code></pre>"},{"location":"reference/talipp/indicators/SOBV/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> SOBV","text":""},{"location":"reference/talipp/indicators/SOBV/#talipp.indicators.SOBV","title":"SOBV","text":""},{"location":"reference/talipp/indicators/SOBV/#talipp.indicators.SOBV.SOBV","title":"SOBV","text":"<pre><code>SOBV(\n    period: int,\n    input_values: List[OHLCV] = None,\n    input_indicator: Indicator = None,\n    input_modifier: InputModifierType = None,\n    input_sampling: SamplingPeriodType = None,\n)\n</code></pre> <p>               Bases: <code>Indicator</code></p> <p>Smoothed On Balance Volume.</p> <p>Input type: OHLCV</p> <p>Output type: <code>float</code></p> <p>Parameters:</p> Name Type Description Default <code>period</code> <code>int</code> <p>Moving average period.</p> required <code>input_values</code> <code>List[OHLCV]</code> <p>List of input values.</p> <code>None</code> <code>input_indicator</code> <code>Indicator</code> <p>Input indicator.</p> <code>None</code> <code>input_modifier</code> <code>InputModifierType</code> <p>Input modifier.</p> <code>None</code> <code>input_sampling</code> <code>SamplingPeriodType</code> <p>Input sampling type.</p> <code>None</code> Source code in <code>talipp/indicators/SOBV.py</code> <pre><code>def __init__(self, period: int,\n             input_values: List[OHLCV] = None,\n             input_indicator: Indicator = None,\n             input_modifier: InputModifierType = None,\n             input_sampling: SamplingPeriodType = None):\n    super().__init__(input_modifier=input_modifier,\n                     input_sampling=input_sampling)\n\n    self.period = period\n\n    self.obv = OBV()\n    self.add_sub_indicator(self.obv)\n\n    self.initialize(input_values, input_indicator)\n</code></pre>"},{"location":"reference/talipp/indicators/STC/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> STC","text":""},{"location":"reference/talipp/indicators/STC/#talipp.indicators.STC","title":"STC","text":""},{"location":"reference/talipp/indicators/STC/#talipp.indicators.STC.STC","title":"STC","text":"<pre><code>STC(\n    fast_macd_period: int,\n    slow_macd_period: int,\n    stoch_period: int,\n    stoch_smoothing_period: int,\n    input_values: List[float] = None,\n    input_indicator: Indicator = None,\n    input_modifier: InputModifierType = None,\n    stoch_ma_type: MAType = MAType.SMA,\n    input_sampling: SamplingPeriodType = None,\n)\n</code></pre> <p>               Bases: <code>Indicator</code></p> <p>Schaff Trend Cycle.</p> <p>Input type: <code>float</code></p> <p>Output type: <code>float</code></p> <p>Parameters:</p> Name Type Description Default <code>fast_macd_period</code> <code>int</code> <p>Fast MACD period.</p> required <code>slow_macd_period</code> <code>int</code> <p>Slow MACD period.</p> required <code>stoch_period</code> <code>int</code> <p>Stoch period.</p> required <code>stoch_smoothing_period</code> <code>int</code> <p>Stoch smooting period.</p> required <code>input_values</code> <code>List[float]</code> <p>List of input values.</p> <code>None</code> <code>input_indicator</code> <code>Indicator</code> <p>Input indicator.</p> <code>None</code> <code>input_modifier</code> <code>InputModifierType</code> <p>Input modifier.</p> <code>None</code> <code>stoch_ma_type</code> <code>MAType</code> <p>Stoch moving average type.</p> <code>SMA</code> <code>input_sampling</code> <code>SamplingPeriodType</code> <p>Input sampling type.</p> <code>None</code> Source code in <code>talipp/indicators/STC.py</code> <pre><code>def __init__(self, fast_macd_period: int,\n             slow_macd_period: int,\n             stoch_period: int,\n             stoch_smoothing_period:int,\n             input_values: List[float] = None,\n             input_indicator: Indicator = None,\n             input_modifier: InputModifierType = None,\n             stoch_ma_type: MAType = MAType.SMA,\n             input_sampling: SamplingPeriodType = None):\n    super().__init__(input_modifier=input_modifier,\n                     input_sampling=input_sampling)\n\n    # use slow_macd_period for signal line as signal line is not relevant here\n    self.macd = MACD(fast_macd_period, slow_macd_period, slow_macd_period)\n    self.stoch_macd = Stoch(stoch_period, stoch_smoothing_period, input_indicator=self.macd, input_modifier=STC.macd_to_ohlcv, ma_type=stoch_ma_type)\n    self.stoch_d = Stoch(stoch_period, stoch_smoothing_period, input_indicator=self.stoch_macd, input_modifier=STC.stoch_d_to_ohlcv, ma_type=stoch_ma_type)\n\n    self.add_sub_indicator(self.macd)\n\n    self.initialize(input_values, input_indicator)\n</code></pre>"},{"location":"reference/talipp/indicators/StdDev/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> StdDev","text":""},{"location":"reference/talipp/indicators/StdDev/#talipp.indicators.StdDev","title":"StdDev","text":""},{"location":"reference/talipp/indicators/StdDev/#talipp.indicators.StdDev.StdDev","title":"StdDev","text":"<pre><code>StdDev(\n    period: int,\n    input_values: List[float] = None,\n    input_indicator: Indicator = None,\n    input_modifier: InputModifierType = None,\n    input_sampling: SamplingPeriodType = None,\n)\n</code></pre> <p>               Bases: <code>Indicator</code></p> <p>Standard Deviation.</p> <p>Input type: <code>float</code></p> <p>Output type: <code>float</code></p> <p>Parameters:</p> Name Type Description Default <code>period</code> <code>int</code> <p>Period.</p> required <code>input_values</code> <code>List[float]</code> <p>List of input values.</p> <code>None</code> <code>input_indicator</code> <code>Indicator</code> <p>Input indicator.</p> <code>None</code> <code>input_modifier</code> <code>InputModifierType</code> <p>Input modifier.</p> <code>None</code> <code>input_sampling</code> <code>SamplingPeriodType</code> <p>Input sampling type.</p> <code>None</code> Source code in <code>talipp/indicators/StdDev.py</code> <pre><code>def __init__(self, period: int,\n             input_values: List[float] = None,\n             input_indicator: Indicator = None,\n             input_modifier: InputModifierType = None,\n             input_sampling: SamplingPeriodType = None):\n    super().__init__(input_modifier=input_modifier,\n                     input_sampling=input_sampling)\n\n    self.period = period\n\n    self.initialize(input_values, input_indicator)\n</code></pre>"},{"location":"reference/talipp/indicators/Stoch/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> Stoch","text":""},{"location":"reference/talipp/indicators/Stoch/#talipp.indicators.Stoch","title":"Stoch","text":""},{"location":"reference/talipp/indicators/Stoch/#talipp.indicators.Stoch.Stoch","title":"Stoch","text":"<pre><code>Stoch(\n    period: int,\n    smoothing_period: int,\n    input_values: List[OHLCV] = None,\n    input_indicator: Indicator = None,\n    input_modifier: InputModifierType = None,\n    ma_type: MAType = MAType.SMA,\n    input_sampling: SamplingPeriodType = None,\n)\n</code></pre> <p>               Bases: <code>Indicator</code></p> <p>Stochastic.</p> <p>Input type: OHLCV</p> <p>Output type: StochVal</p> <p>Parameters:</p> Name Type Description Default <code>period</code> <code>int</code> <p>Period.</p> required <code>smoothing_period</code> <code>int</code> <p>Moving average period.</p> required <code>input_values</code> <code>List[OHLCV]</code> <p>List of input values.</p> <code>None</code> <code>input_indicator</code> <code>Indicator</code> <p>Input indicator.</p> <code>None</code> <code>input_modifier</code> <code>InputModifierType</code> <p>Input modifier.</p> <code>None</code> <code>ma_type</code> <code>MAType</code> <p>Moving average type.</p> <code>SMA</code> <code>input_sampling</code> <code>SamplingPeriodType</code> <p>Input sampling type.</p> <code>None</code> Source code in <code>talipp/indicators/Stoch.py</code> <pre><code>def __init__(self, period: int,\n             smoothing_period: int,\n             input_values: List[OHLCV] = None,\n             input_indicator: Indicator = None,\n             input_modifier: InputModifierType = None,\n             ma_type: MAType = MAType.SMA,\n             input_sampling: SamplingPeriodType = None):\n    super().__init__(input_modifier=input_modifier,\n                     output_value_type=StochVal,\n                     input_sampling=input_sampling)\n\n    self.period = period\n\n    self.values_d = MAFactory.get_ma(ma_type, smoothing_period)\n    self.add_managed_sequence(self.values_d)\n\n    self.initialize(input_values, input_indicator)\n</code></pre>"},{"location":"reference/talipp/indicators/Stoch/#talipp.indicators.Stoch.StochVal","title":"StochVal  <code>dataclass</code>","text":"<pre><code>StochVal(k: float = None, d: float = None)\n</code></pre> <p><code>Stoch</code> output type.</p> <p>Parameters:</p> Name Type Description Default <code>k</code> <code>float</code> <p><code>k</code> value.</p> <code>None</code> <code>d</code> <code>float</code> <p><code>d</code> value.</p> <code>None</code>"},{"location":"reference/talipp/indicators/StochRSI/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> StochRSI","text":""},{"location":"reference/talipp/indicators/StochRSI/#talipp.indicators.StochRSI","title":"StochRSI","text":""},{"location":"reference/talipp/indicators/StochRSI/#talipp.indicators.StochRSI.StochRSI","title":"StochRSI","text":"<pre><code>StochRSI(\n    rsi_period: int,\n    stoch_period: int,\n    k_smoothing_period: int,\n    d_smoothing_period: int,\n    input_values: List[float] = None,\n    input_indicator: Indicator = None,\n    input_modifier: InputModifierType = None,\n    ma_type: MAType = MAType.SMA,\n    input_sampling: SamplingPeriodType = None,\n)\n</code></pre> <p>               Bases: <code>Indicator</code></p> <p>Stochastic RSI.</p> <p>Input type: <code>float</code></p> <p>Output type: StochRSIVal</p> <p>Parameters:</p> Name Type Description Default <code>rsi_period</code> <code>int</code> <p>RSI period.</p> required <code>stoch_period</code> <code>int</code> <p>Stoch period.</p> required <code>k_smoothing_period</code> <code>int</code> <p>Stoch's <code>k</code> moving average period.</p> required <code>d_smoothing_period</code> <code>int</code> <p>Stoch's <code>d</code> moving average period.</p> required <code>input_values</code> <code>List[float]</code> <p>List of input values.</p> <code>None</code> <code>input_indicator</code> <code>Indicator</code> <p>Input indicator.</p> <code>None</code> <code>input_modifier</code> <code>InputModifierType</code> <p>Input modifier.</p> <code>None</code> <code>ma_type</code> <code>MAType</code> <p>Moving average type.</p> <code>SMA</code> <code>input_sampling</code> <code>SamplingPeriodType</code> <p>Input sampling type.</p> <code>None</code> Source code in <code>talipp/indicators/StochRSI.py</code> <pre><code>def __init__(self, rsi_period: int,\n             stoch_period: int,\n             k_smoothing_period: int,\n             d_smoothing_period: int,\n             input_values: List[float] = None,\n             input_indicator: Indicator = None,\n             input_modifier: InputModifierType = None,\n             ma_type: MAType = MAType.SMA,\n             input_sampling: SamplingPeriodType = None):\n    super().__init__(input_modifier=input_modifier,\n                     output_value_type=StochRSIVal,\n                     input_sampling=input_sampling)\n\n    self.stoch_period = stoch_period\n\n    self.rsi = RSI(rsi_period)\n    self.add_sub_indicator(self.rsi)\n\n    self.smoothed_k = MAFactory.get_ma(ma_type, k_smoothing_period)\n    self.add_managed_sequence(self.smoothed_k)\n\n    self.values_d = MAFactory.get_ma(ma_type, d_smoothing_period)\n    self.add_managed_sequence(self.values_d)\n\n    self.initialize(input_values, input_indicator)\n</code></pre>"},{"location":"reference/talipp/indicators/StochRSI/#talipp.indicators.StochRSI.StochRSIVal","title":"StochRSIVal  <code>dataclass</code>","text":"<pre><code>StochRSIVal(k: float = None, d: float = None)\n</code></pre> <p><code>StochRSI</code> output type.</p> <p>Parameters:</p> Name Type Description Default <code>k</code> <code>float</code> <p><code>k</code> value.</p> <code>None</code> <code>d</code> <code>float</code> <p><code>d</code> value.</p> <code>None</code>"},{"location":"reference/talipp/indicators/SuperTrend/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> SuperTrend","text":""},{"location":"reference/talipp/indicators/SuperTrend/#talipp.indicators.SuperTrend","title":"SuperTrend","text":""},{"location":"reference/talipp/indicators/SuperTrend/#talipp.indicators.SuperTrend.SuperTrend","title":"SuperTrend","text":"<pre><code>SuperTrend(\n    atr_period: int,\n    mult: int,\n    input_values: List[OHLCV] = None,\n    input_indicator: Indicator = None,\n    input_modifier: InputModifierType = None,\n    input_sampling: SamplingPeriodType = None,\n)\n</code></pre> <p>               Bases: <code>Indicator</code></p> <p>SuperTrend.</p> <p>Input type: OHLCV</p> <p>Output type: SuperTrendVal</p> <p>Parameters:</p> Name Type Description Default <code>atr_period</code> <code>int</code> <p>ATR period.</p> required <code>mult</code> <code>int</code> <p>ATR multiplier.</p> required <code>input_values</code> <code>List[OHLCV]</code> <p>List of input values.</p> <code>None</code> <code>input_indicator</code> <code>Indicator</code> <p>Input indicator.</p> <code>None</code> <code>input_modifier</code> <code>InputModifierType</code> <p>Input modifier.</p> <code>None</code> <code>input_sampling</code> <code>SamplingPeriodType</code> <p>Input sampling type.</p> <code>None</code> Source code in <code>talipp/indicators/SuperTrend.py</code> <pre><code>def __init__(self, atr_period: int,\n             mult: int,\n             input_values: List[OHLCV] = None,\n             input_indicator: Indicator = None,\n             input_modifier: InputModifierType = None,\n             input_sampling: SamplingPeriodType = None):\n    super().__init__(input_modifier=input_modifier,\n                     output_value_type=SuperTrendVal,\n                     input_sampling=input_sampling)\n\n    self.atr = ATR(atr_period)\n    self.mult = mult\n\n    # final upper band\n    self.fub = []\n    # final lower band\n    self.flb = []\n\n    self.add_sub_indicator(self.atr)\n    self.add_managed_sequence(self.fub)\n    self.add_managed_sequence(self.flb)\n\n    self.initialize(input_values, input_indicator)\n</code></pre>"},{"location":"reference/talipp/indicators/SuperTrend/#talipp.indicators.SuperTrend.SuperTrendVal","title":"SuperTrendVal  <code>dataclass</code>","text":"<pre><code>SuperTrendVal(value: float = None, trend: Trend = None)\n</code></pre> <p><code>SuperTrend</code> output type.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>float</code> <p><code>SuperTrend</code> value.</p> <code>None</code> <code>trend</code> <code>Trend</code> <p><code>SuperTrend</code> trend.</p> <code>None</code>"},{"location":"reference/talipp/indicators/SuperTrend/#talipp.indicators.SuperTrend.Trend","title":"Trend","text":"<p>               Bases: <code>Enum</code></p> <p><code>SuperTrend</code> trend.</p>"},{"location":"reference/talipp/indicators/SuperTrend/#talipp.indicators.SuperTrend.Trend.DOWN","title":"DOWN  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DOWN = auto()\n</code></pre> <p>Down trend.</p>"},{"location":"reference/talipp/indicators/SuperTrend/#talipp.indicators.SuperTrend.Trend.UP","title":"UP  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>UP = auto()\n</code></pre> <p>Up trend.</p>"},{"location":"reference/talipp/indicators/T3/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> T3","text":""},{"location":"reference/talipp/indicators/T3/#talipp.indicators.T3","title":"T3","text":""},{"location":"reference/talipp/indicators/T3/#talipp.indicators.T3.T3","title":"T3","text":"<pre><code>T3(\n    period: int,\n    factor: float = 0.7,\n    input_values: List[float] = None,\n    input_indicator: Indicator = None,\n    input_modifier: InputModifierType = None,\n    input_sampling: SamplingPeriodType = None,\n)\n</code></pre> <p>               Bases: <code>Indicator</code></p> <p>T3 Moving Average.</p> <p>Input type: <code>float</code></p> <p>Output type: <code>float</code></p> <p>Parameters:</p> Name Type Description Default <code>period</code> <code>int</code> <p>Period.</p> required <code>factor</code> <code>float</code> <p>Multiplicative factor.</p> <code>0.7</code> <code>input_values</code> <code>List[float]</code> <p>List of input values.</p> <code>None</code> <code>input_indicator</code> <code>Indicator</code> <p>Input indicator.</p> <code>None</code> <code>input_modifier</code> <code>InputModifierType</code> <p>Input modifier.</p> <code>None</code> <code>input_sampling</code> <code>SamplingPeriodType</code> <p>Input sampling type.</p> <code>None</code> Source code in <code>talipp/indicators/T3.py</code> <pre><code>def __init__(self, period: int,\n             factor: float = 0.7,\n             input_values: List[float] = None,\n             input_indicator: Indicator = None,\n             input_modifier: InputModifierType = None,\n             input_sampling: SamplingPeriodType = None):\n    super().__init__(input_modifier=input_modifier,\n                     input_sampling=input_sampling)\n\n    self.period = period\n\n    self.ema1 = EMA(period)\n    self.ema2 = EMA(period, input_indicator=self.ema1)\n    self.ema3 = EMA(period, input_indicator=self.ema2)\n    self.ema4 = EMA(period, input_indicator=self.ema3)\n    self.ema5 = EMA(period, input_indicator=self.ema4)\n    self.ema6 = EMA(period, input_indicator=self.ema5)\n\n    self.add_sub_indicator(self.ema1)\n\n    self.c1 = -(factor**3)\n    self.c2 = 3 * factor**2 + 3 * factor**3\n    self.c3 = -6 * factor**2 - 3 * factor - 3 * factor**3\n    self.c4 = 1 + 3 * factor + factor**3 + 3 * factor**2\n\n    self.initialize(input_values, input_indicator)\n</code></pre>"},{"location":"reference/talipp/indicators/TEMA/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> TEMA","text":""},{"location":"reference/talipp/indicators/TEMA/#talipp.indicators.TEMA","title":"TEMA","text":""},{"location":"reference/talipp/indicators/TEMA/#talipp.indicators.TEMA.TEMA","title":"TEMA","text":"<pre><code>TEMA(\n    period: int,\n    input_values: List[float] = None,\n    input_indicator: Indicator = None,\n    input_modifier: InputModifierType = None,\n    input_sampling: SamplingPeriodType = None,\n)\n</code></pre> <p>               Bases: <code>Indicator</code></p> <p>Triple Exponential Moving Average.</p> <p>Input type: <code>float</code></p> <p>Output type: <code>float</code></p> <p>Parameters:</p> Name Type Description Default <code>period</code> <code>int</code> <p>Period.</p> required <code>input_values</code> <code>List[float]</code> <p>List of input values.</p> <code>None</code> <code>input_indicator</code> <code>Indicator</code> <p>Input indicator.</p> <code>None</code> <code>input_modifier</code> <code>InputModifierType</code> <p>Input modifier.</p> <code>None</code> <code>input_sampling</code> <code>SamplingPeriodType</code> <p>Input sampling type.</p> <code>None</code> Source code in <code>talipp/indicators/TEMA.py</code> <pre><code>def __init__(self, period: int,\n             input_values: List[float] = None,\n             input_indicator: Indicator = None,\n             input_modifier: InputModifierType = None,\n             input_sampling: SamplingPeriodType = None):\n    super().__init__(input_modifier=input_modifier,\n                     input_sampling=input_sampling)\n\n    self.period = period\n\n    self.ema = EMA(period)\n    self.ema_ema = EMA(period, input_indicator=self.ema)\n    self.ema_ema_ema = EMA(period, input_indicator=self.ema_ema)\n\n    self.add_sub_indicator(self.ema)\n\n    self.initialize(input_values, input_indicator)\n</code></pre>"},{"location":"reference/talipp/indicators/TRIX/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> TRIX","text":""},{"location":"reference/talipp/indicators/TRIX/#talipp.indicators.TRIX","title":"TRIX","text":""},{"location":"reference/talipp/indicators/TRIX/#talipp.indicators.TRIX.TRIX","title":"TRIX","text":"<pre><code>TRIX(\n    period: int,\n    input_values: List[float] = None,\n    input_indicator: Indicator = None,\n    input_modifier: InputModifierType = None,\n    input_sampling: SamplingPeriodType = None,\n)\n</code></pre> <p>               Bases: <code>Indicator</code></p> <p>TRIX.</p> <p>Input type: <code>float</code></p> <p>Output type: <code>float</code></p> <p>Parameters:</p> Name Type Description Default <code>period</code> <code>int</code> <p>Period.</p> required <code>input_values</code> <code>List[float]</code> <p>List of input values.</p> <code>None</code> <code>input_indicator</code> <code>Indicator</code> <p>Input indicator.</p> <code>None</code> <code>input_modifier</code> <code>InputModifierType</code> <p>Input modifier.</p> <code>None</code> <code>input_sampling</code> <code>SamplingPeriodType</code> <p>Input sampling type.</p> <code>None</code> Source code in <code>talipp/indicators/TRIX.py</code> <pre><code>def __init__(self, period: int,\n             input_values: List[float] = None,\n             input_indicator: Indicator = None,\n             input_modifier: InputModifierType = None,\n             input_sampling: SamplingPeriodType = None):\n    super().__init__(input_modifier=input_modifier,\n                     input_sampling=input_sampling)\n\n    self.period = period\n\n    self.ema1 = EMA(period)\n    self.ema2 = EMA(period, input_indicator = self.ema1)\n    self.ema3 = EMA(period, input_indicator = self.ema2)\n\n    self.add_sub_indicator(self.ema1)\n\n    self.initialize(input_values, input_indicator)\n</code></pre>"},{"location":"reference/talipp/indicators/TSI/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> TSI","text":""},{"location":"reference/talipp/indicators/TSI/#talipp.indicators.TSI","title":"TSI","text":""},{"location":"reference/talipp/indicators/TSI/#talipp.indicators.TSI.TSI","title":"TSI","text":"<pre><code>TSI(\n    fast_period: int,\n    slow_period: int,\n    input_values: List[float] = None,\n    input_indicator: Indicator = None,\n    input_modifier: InputModifierType = None,\n    ma_type: MAType = MAType.EMA,\n    input_sampling: SamplingPeriodType = None,\n)\n</code></pre> <p>               Bases: <code>Indicator</code></p> <p>True Strength Index.</p> <p>Input type: <code>float</code></p> <p>Output type: <code>float</code></p> <p>Parameters:</p> Name Type Description Default <code>fast_period</code> <code>int</code> <p>Fast moving average period.</p> required <code>slow_period</code> <code>int</code> <p>Slow moving average period.</p> required <code>input_values</code> <code>List[float]</code> <p>List of input values.</p> <code>None</code> <code>input_indicator</code> <code>Indicator</code> <p>Input indicator.</p> <code>None</code> <code>input_modifier</code> <code>InputModifierType</code> <p>Input modifier.</p> <code>None</code> <code>ma_type</code> <code>MAType</code> <p>Moving average type.</p> <code>EMA</code> <code>input_sampling</code> <code>SamplingPeriodType</code> <p>Input sampling type.</p> <code>None</code> Source code in <code>talipp/indicators/TSI.py</code> <pre><code>def __init__(self, fast_period: int,\n             slow_period: int,\n             input_values: List[float] = None,\n             input_indicator: Indicator = None,\n             input_modifier: InputModifierType = None,\n             ma_type: MAType = MAType.EMA,\n             input_sampling: SamplingPeriodType = None):\n    super().__init__(input_modifier=input_modifier,\n                     input_sampling=input_sampling)\n\n    self.slow_ma = MAFactory.get_ma(ma_type, slow_period)\n    self.add_managed_sequence(self.slow_ma)\n    self.fast_ma = MAFactory.get_ma(ma_type, fast_period, input_indicator = self.slow_ma)\n\n    self.abs_slow_ma = MAFactory.get_ma(ma_type, slow_period)\n    self.add_managed_sequence(self.abs_slow_ma)\n    self.abs_fast_ma = MAFactory.get_ma(ma_type, fast_period, input_indicator = self.abs_slow_ma)\n\n    self.initialize(input_values, input_indicator)\n</code></pre>"},{"location":"reference/talipp/indicators/TTM/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> TTM","text":""},{"location":"reference/talipp/indicators/TTM/#talipp.indicators.TTM","title":"TTM","text":""},{"location":"reference/talipp/indicators/TTM/#talipp.indicators.TTM.TTM","title":"TTM","text":"<pre><code>TTM(\n    period: int,\n    bb_std_dev_mult: float = 2,\n    kc_atr_mult: float = 1.5,\n    input_values: List[OHLCV] = None,\n    input_indicator: Indicator = None,\n    input_modifier: InputModifierType = None,\n    ma_type: MAType = MAType.SMA,\n    input_sampling: SamplingPeriodType = None,\n)\n</code></pre> <p>               Bases: <code>Indicator</code></p> <p>TTM Squeeze.</p> <p>Input type: OHLCV</p> <p>Output type: TTMVal</p> <p>Parameters:</p> Name Type Description Default <code>period</code> <code>int</code> <p>Period.</p> required <code>bb_std_dev_mult</code> <code>float</code> <p>BB standard deviation multiplier.</p> <code>2</code> <code>kc_atr_mult</code> <code>float</code> <p>KeltnerChannels ATR multiplier.</p> <code>1.5</code> <code>input_values</code> <code>List[OHLCV]</code> <p>List of input values.</p> <code>None</code> <code>input_indicator</code> <code>Indicator</code> <p>Input indicator.</p> <code>None</code> <code>input_modifier</code> <code>InputModifierType</code> <p>Input modifier.</p> <code>None</code> <code>ma_type</code> <code>MAType</code> <p>Moving average type.</p> <code>SMA</code> <code>input_sampling</code> <code>SamplingPeriodType</code> <p>Input sampling type.</p> <code>None</code> Source code in <code>talipp/indicators/TTM.py</code> <pre><code>def __init__(self, period: int,\n             bb_std_dev_mult: float = 2,\n             kc_atr_mult: float = 1.5,\n             input_values: List[OHLCV] = None,\n             input_indicator: Indicator = None,\n             input_modifier: InputModifierType = None,\n             ma_type: MAType = MAType.SMA,\n             input_sampling: SamplingPeriodType = None):\n    super().__init__(input_modifier=input_modifier,\n                     output_value_type=TTMVal,\n                     input_sampling=input_sampling)\n\n    self.period = period\n\n    self.bb = BB(period, bb_std_dev_mult, input_modifier=ValueExtractor.extract_close)\n    self.dc = DonchianChannels(period)\n    self.kc = KeltnerChannels(period, period, kc_atr_mult, kc_atr_mult)\n    self.ma = MAFactory.get_ma(ma_type, period, input_modifier=ValueExtractor.extract_close)\n\n    self.add_sub_indicator(self.bb)\n    self.add_sub_indicator(self.dc)\n    self.add_sub_indicator(self.kc)\n    self.add_sub_indicator(self.ma)\n\n    self.deltas = []\n    self.add_managed_sequence(self.deltas)\n\n    # pre-compute values for linear regression\n    self.mean_x = sum(range(self.period)) / float(self.period)\n    self.denom = 0\n    for x in range(self.period):\n        self.denom += (x - self.mean_x) ** 2\n\n    self.initialize(input_values, input_indicator)\n</code></pre>"},{"location":"reference/talipp/indicators/TTM/#talipp.indicators.TTM.TTMVal","title":"TTMVal  <code>dataclass</code>","text":"<pre><code>TTMVal(squeeze: bool = None, histogram: float = None)\n</code></pre> <p><code>TTM</code> output type.</p> <p>Parameters:</p> Name Type Description Default <code>squeeze</code> <code>bool</code> <p><code>True</code> if squeeze is on, otherwise <code>False</code>.</p> <code>None</code> <code>histogram</code> <code>float</code> <p>Histogram of the linear regression.</p> <code>None</code>"},{"location":"reference/talipp/indicators/UO/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> UO","text":""},{"location":"reference/talipp/indicators/UO/#talipp.indicators.UO","title":"UO","text":""},{"location":"reference/talipp/indicators/UO/#talipp.indicators.UO.UO","title":"UO","text":"<pre><code>UO(\n    fast_period: int,\n    mid_period: int,\n    slow_period: int,\n    input_values: List[OHLCV] = None,\n    input_indicator: Indicator = None,\n    input_modifier: InputModifierType = None,\n    input_sampling: SamplingPeriodType = None,\n)\n</code></pre> <p>               Bases: <code>Indicator</code></p> <p>Ultimate Oscillator.</p> <p>Input type: OHLCV</p> <p>Output type: <code>float</code></p> <p>Parameters:</p> Name Type Description Default <code>fast_period</code> <code>int</code> <p>Fast period.</p> required <code>mid_period</code> <code>int</code> <p>Mid period.</p> required <code>slow_period</code> <code>int</code> <p>Slow period.</p> required <code>input_values</code> <code>List[OHLCV]</code> <p>List of input values.</p> <code>None</code> <code>input_indicator</code> <code>Indicator</code> <p>Input indicator.</p> <code>None</code> <code>input_modifier</code> <code>InputModifierType</code> <p>Input modifier.</p> <code>None</code> <code>input_sampling</code> <code>SamplingPeriodType</code> <p>Input sampling type.</p> <code>None</code> Source code in <code>talipp/indicators/UO.py</code> <pre><code>def __init__(self, fast_period: int,\n             mid_period: int,\n             slow_period: int,\n             input_values: List[OHLCV] = None,\n             input_indicator: Indicator = None,\n             input_modifier: InputModifierType = None,\n             input_sampling: SamplingPeriodType = None):\n    super().__init__(input_modifier=input_modifier,\n                     input_sampling=input_sampling)\n\n    self.fast_period = fast_period\n    self.mid_period = mid_period\n    self.slow_period = slow_period\n\n    self.buy_press = []\n    self.true_range = []\n\n    self.add_managed_sequence(self.buy_press)\n    self.add_managed_sequence(self.true_range)\n\n    self.initialize(input_values, input_indicator)\n</code></pre>"},{"location":"reference/talipp/indicators/VTX/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> VTX","text":""},{"location":"reference/talipp/indicators/VTX/#talipp.indicators.VTX","title":"VTX","text":""},{"location":"reference/talipp/indicators/VTX/#talipp.indicators.VTX.VTX","title":"VTX","text":"<pre><code>VTX(\n    period: int,\n    input_values: List[OHLCV] = None,\n    input_indicator: Indicator = None,\n    input_modifier: InputModifierType = None,\n    input_sampling: SamplingPeriodType = None,\n)\n</code></pre> <p>               Bases: <code>Indicator</code></p> <p>Vortex Indicator.</p> <p>Input type: OHLCV</p> <p>Output type: VTXVal</p> <p>Parameters:</p> Name Type Description Default <code>period</code> <code>int</code> <p>Period.</p> required <code>input_values</code> <code>List[OHLCV]</code> <p>List of input values.</p> <code>None</code> <code>input_indicator</code> <code>Indicator</code> <p>Input indicator.</p> <code>None</code> <code>input_modifier</code> <code>InputModifierType</code> <p>Input modifier.</p> <code>None</code> <code>input_sampling</code> <code>SamplingPeriodType</code> <p>Input sampling type.</p> <code>None</code> Source code in <code>talipp/indicators/VTX.py</code> <pre><code>def __init__(self, period: int,\n             input_values: List[OHLCV] = None,\n             input_indicator: Indicator = None,\n             input_modifier: InputModifierType = None,\n             input_sampling: SamplingPeriodType = None):\n    super().__init__(input_modifier=input_modifier,\n                     output_value_type=VTXVal,\n                     input_sampling=input_sampling)\n\n    self.period = period\n\n    self.plus_vm = []\n    self.add_managed_sequence(self.plus_vm)\n\n    self.minus_vm = []\n    self.add_managed_sequence(self.minus_vm)\n\n    self.atr = ATR(1)\n    self.add_sub_indicator(self.atr)\n\n    self.initialize(input_values, input_indicator)\n</code></pre>"},{"location":"reference/talipp/indicators/VTX/#talipp.indicators.VTX.VTXVal","title":"VTXVal  <code>dataclass</code>","text":"<pre><code>VTXVal(plus_vtx: float = None, minus_vtx: float = None)\n</code></pre> <p><code>VTX</code> output type.</p> <p>Parameters:</p> Name Type Description Default <code>plus_vtx</code> <code>float</code> <p>Positive movement.</p> <code>None</code> <code>minus_vtx</code> <code>float</code> <p>Negative movement.</p> <code>None</code>"},{"location":"reference/talipp/indicators/VWAP/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> VWAP","text":""},{"location":"reference/talipp/indicators/VWAP/#talipp.indicators.VWAP","title":"VWAP","text":""},{"location":"reference/talipp/indicators/VWAP/#talipp.indicators.VWAP.VWAP","title":"VWAP","text":"<pre><code>VWAP(\n    input_values: List[OHLCV] = None,\n    input_indicator: Indicator = None,\n    input_modifier: InputModifierType = None,\n    input_sampling: SamplingPeriodType = None,\n)\n</code></pre> <p>               Bases: <code>Indicator</code></p> <p>Volume Weighted Average Price.</p> <p>Input type: OHLCV</p> <p>Output type: <code>float</code></p> <p>Parameters:</p> Name Type Description Default <code>input_values</code> <code>List[OHLCV]</code> <p>List of input values.</p> <code>None</code> <code>input_indicator</code> <code>Indicator</code> <p>Input indicator.</p> <code>None</code> <code>input_modifier</code> <code>InputModifierType</code> <p>Input modifier.</p> <code>None</code> <code>input_sampling</code> <code>SamplingPeriodType</code> <p>Input sampling type.</p> <code>None</code> Source code in <code>talipp/indicators/VWAP.py</code> <pre><code>def __init__(self, input_values: List[OHLCV] = None,\n             input_indicator: Indicator = None,\n             input_modifier: InputModifierType = None,\n             input_sampling: SamplingPeriodType = None):\n    super().__init__(input_modifier=input_modifier,\n                     input_sampling=input_sampling)\n\n    self.sum_price_vol = []\n    self.sum_vol = []\n\n    self.add_managed_sequence(self.sum_price_vol)\n    self.add_managed_sequence(self.sum_vol)\n\n    self.initialize(input_values, input_indicator)\n</code></pre>"},{"location":"reference/talipp/indicators/VWMA/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> VWMA","text":""},{"location":"reference/talipp/indicators/VWMA/#talipp.indicators.VWMA","title":"VWMA","text":""},{"location":"reference/talipp/indicators/VWMA/#talipp.indicators.VWMA.VWMA","title":"VWMA","text":"<pre><code>VWMA(\n    period: int,\n    input_values: List[OHLCV] = None,\n    input_indicator: Indicator = None,\n    input_modifier: InputModifierType = None,\n    input_sampling: SamplingPeriodType = None,\n)\n</code></pre> <p>               Bases: <code>Indicator</code></p> <p>Volume Weighted Moving Average.</p> <p>Input type: OHLCV</p> <p>Output type: <code>float</code></p> <p>Parameters:</p> Name Type Description Default <code>period</code> <code>int</code> <p>Period.</p> required <code>input_values</code> <code>List[OHLCV]</code> <p>List of input values.</p> <code>None</code> <code>input_indicator</code> <code>Indicator</code> <p>Input indicator.</p> <code>None</code> <code>input_modifier</code> <code>InputModifierType</code> <p>Input modifier.</p> <code>None</code> <code>input_sampling</code> <code>SamplingPeriodType</code> <p>Input sampling type.</p> <code>None</code> Source code in <code>talipp/indicators/VWMA.py</code> <pre><code>def __init__(self, period: int,\n             input_values: List[OHLCV] = None,\n             input_indicator: Indicator = None,\n             input_modifier: InputModifierType = None,\n             input_sampling: SamplingPeriodType = None):\n    super().__init__(input_modifier=input_modifier,\n                     input_sampling=input_sampling)\n\n    self.period = period\n\n    self.initialize(input_values, input_indicator)\n</code></pre>"},{"location":"reference/talipp/indicators/WMA/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> WMA","text":""},{"location":"reference/talipp/indicators/WMA/#talipp.indicators.WMA","title":"WMA","text":""},{"location":"reference/talipp/indicators/WMA/#talipp.indicators.WMA.WMA","title":"WMA","text":"<pre><code>WMA(\n    period: int,\n    input_values: List[float] = None,\n    input_indicator: Indicator = None,\n    input_modifier: InputModifierType = None,\n    input_sampling: SamplingPeriodType = None,\n)\n</code></pre> <p>               Bases: <code>Indicator</code></p> <p>Weighted Moving Average.</p> <p>Input type: <code>float</code></p> <p>Output type: <code>float</code></p> <p>Parameters:</p> Name Type Description Default <code>period</code> <code>int</code> <p>Period.</p> required <code>input_values</code> <code>List[float]</code> <p>List of input values.</p> <code>None</code> <code>input_indicator</code> <code>Indicator</code> <p>Input indicator.</p> <code>None</code> <code>input_modifier</code> <code>InputModifierType</code> <p>Input modifier.</p> <code>None</code> <code>input_sampling</code> <code>SamplingPeriodType</code> <p>Input sampling type.</p> <code>None</code> Source code in <code>talipp/indicators/WMA.py</code> <pre><code>def __init__(self, period: int,\n             input_values: List[float] = None,\n             input_indicator: Indicator = None,\n             input_modifier: InputModifierType = None,\n             input_sampling: SamplingPeriodType = None):\n    super().__init__(input_modifier=input_modifier,\n                     input_sampling=input_sampling)\n\n    self.period = period\n\n    self.denom_sum = period * (period + 1) / 2.0\n\n    self.initialize(input_values, input_indicator)\n</code></pre>"},{"location":"reference/talipp/indicators/ZLEMA/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> ZLEMA","text":""},{"location":"reference/talipp/indicators/ZLEMA/#talipp.indicators.ZLEMA","title":"ZLEMA","text":""},{"location":"reference/talipp/indicators/ZLEMA/#talipp.indicators.ZLEMA.ZLEMA","title":"ZLEMA","text":"<pre><code>ZLEMA(\n    period: int,\n    input_values: List[float] = None,\n    input_indicator: Indicator = None,\n    input_modifier: InputModifierType = None,\n    input_sampling: SamplingPeriodType = None,\n)\n</code></pre> <p>               Bases: <code>Indicator</code></p> <p>Zero Lag Exponential Moving Average.</p> <p>Input type: <code>float</code></p> <p>Output type: <code>float</code></p> <p>Parameters:</p> Name Type Description Default <code>period</code> <code>int</code> <p>Period.</p> required <code>input_values</code> <code>List[float]</code> <p>List of input values.</p> <code>None</code> <code>input_indicator</code> <code>Indicator</code> <p>Input indicator.</p> <code>None</code> <code>input_modifier</code> <code>InputModifierType</code> <p>Input modifier.</p> <code>None</code> <code>input_sampling</code> <code>SamplingPeriodType</code> <p>Input sampling type.</p> <code>None</code> Source code in <code>talipp/indicators/ZLEMA.py</code> <pre><code>def __init__(self, period: int,\n             input_values: List[float] = None,\n             input_indicator: Indicator = None,\n             input_modifier: InputModifierType = None,\n             input_sampling: SamplingPeriodType = None):\n    super().__init__(input_modifier=input_modifier,\n                     input_sampling=input_sampling)\n\n    self.lag = round((period - 1) / 2.0)\n\n    self.ema = EMA(period)\n    self.add_managed_sequence(self.ema)\n\n    self.initialize(input_values, input_indicator)\n</code></pre>"},{"location":"reference/talipp/indicators/ZigZag/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> ZigZag","text":""},{"location":"reference/talipp/indicators/ZigZag/#talipp.indicators.ZigZag","title":"ZigZag","text":""},{"location":"reference/talipp/indicators/ZigZag/#talipp.indicators.ZigZag.PivotType","title":"PivotType","text":"<p>               Bases: <code>Enum</code></p> <p>Pivot type.</p>"},{"location":"reference/talipp/indicators/ZigZag/#talipp.indicators.ZigZag.PivotType.HIGH","title":"HIGH  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>HIGH = auto()\n</code></pre> <p>High pivot.</p>"},{"location":"reference/talipp/indicators/ZigZag/#talipp.indicators.ZigZag.PivotType.LOW","title":"LOW  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LOW = auto()\n</code></pre> <p>Low pivot.</p>"},{"location":"reference/talipp/indicators/ZigZag/#talipp.indicators.ZigZag.ZigZag","title":"ZigZag","text":"<pre><code>ZigZag(\n    sensitivity: float,\n    min_trend_length: int,\n    input_values: List[OHLCV] = None,\n    input_indicator: Indicator = None,\n    input_modifier: InputModifierType = None,\n    input_sampling: SamplingPeriodType = None,\n)\n</code></pre> <p>               Bases: <code>Indicator</code></p> Warning <p>Due to its nature the indicator does not support <code>update</code> and <code>remove</code> operations.</p> <p>Input type: OHLCV</p> <p>Output type: ZigZagVal</p> Important <p>Outputs of the indicator contain only pivots, i.e. length of the output does not match length of the input.</p> Note <p>ZigZag indicator can also be used as a high/low pivots indicator if <code>sensitivity</code> is set to 0.</p> <p>Parameters:</p> Name Type Description Default <code>sensitivity</code> <code>float</code> <p>ZigZag sensitivity expressed as relative percentage change (e.g. 0.1 means change of 10%).</p> required <code>min_trend_length</code> <code>int</code> <p>Minimum number of bars between two pivots.</p> required <code>input_values</code> <code>List[OHLCV]</code> <p>List of input values.</p> <code>None</code> <code>input_indicator</code> <code>Indicator</code> <p>Input indicator.</p> <code>None</code> <code>input_modifier</code> <code>InputModifierType</code> <p>Input modifier.</p> <code>None</code> <code>input_sampling</code> <code>SamplingPeriodType</code> <p>Input sampling type.</p> <code>None</code> Source code in <code>talipp/indicators/ZigZag.py</code> <pre><code>def __init__(self, sensitivity: float,\n             min_trend_length: int,\n             input_values: List[OHLCV] = None,\n             input_indicator: Indicator = None,\n             input_modifier: InputModifierType = None,\n             input_sampling: SamplingPeriodType = None):\n    super().__init__(input_modifier=input_modifier,\n                     output_value_type=ZigZagVal,\n                     input_sampling=input_sampling)\n\n    self.sensitivity = sensitivity\n    self.min_trend_length = min_trend_length\n\n    self.last_pivot: ZigZag.ZigZagValWrapper = None\n\n    self.initialize(input_values, input_indicator)\n</code></pre>"},{"location":"reference/talipp/indicators/ZigZag/#talipp.indicators.ZigZag.ZigZagVal","title":"ZigZagVal  <code>dataclass</code>","text":"<pre><code>ZigZagVal(ohlcv: OHLCV = None, type: PivotType = None)\n</code></pre> <p><code>ZigZag</code> output type.</p> <p>Parameters:</p> Name Type Description Default <code>ohlcv</code> <code>OHLCV</code> <p>Pivot.</p> <code>None</code> <code>type</code> <code>PivotType</code> <p>Pivot type.</p> <code>None</code>"}]}